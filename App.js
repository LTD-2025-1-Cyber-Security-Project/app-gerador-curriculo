const IA_APIS = {
  GEMINI: {
    nome: 'Google Gemini',
    chaveNecessaria: true,
    chaveDefault: 'AIzaSyDCAepi3dUF78ef0-735Z6g1occ31fF7Pg', // Nova API key padr√£o
    endpoint: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent'
  },
  OPENAI: {
    nome: 'ChatGPT',
    chaveNecessaria: true,
    chaveDefault: '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',
    endpoint: 'https://api.openai.com/v1/chat/completions'
  },
  CLAUDE: {
    nome: 'Claude',
    chaveNecessaria: true,
    chaveDefault: '',
    endpoint: 'https://api.anthropic.com/v1/messages'
  },
  PERPLEXITY: {
    nome: 'Perplexity',
    chaveNecessaria: true,
    chaveDefault: '',
    endpoint: 'https://api.perplexity.ai/chat/completions'
  },
  BING: {
    nome: 'Bing AI',
    chaveNecessaria: true,
    chaveDefault: '',
    endpoint: 'https://api.bing.microsoft.com/v7.0/search'
  },
  DEEPSEEK: {
    nome: 'DeepSeek',
    chaveNecessaria: true,
    chaveDefault: '',
    endpoint: 'https://api.deepseek.com/v1/chat/completions'
  },
  BLACKBOX: {
    nome: 'Blackbox AI',
    chaveNecessaria: true,
    chaveDefault: '',
    endpoint: 'https://api.useblackbox.io/v1/chat/completions'
  },
  GROK: {
    nome: 'Grok',
    chaveNecessaria: true,
    chaveDefault: '',
    endpoint: 'https://api.grok.x.ai/v1/chat/completions'
  },
  OFFLINE: {
    nome: 'Modo Offline',
    chaveNecessaria: false,
    offline: true
  }
};

const DashboardScreen = ({ navigation }) => {
  const { user } = useAuth();
  const [stats, setStats] = useState({
    totalCurriculos: 0,
    vagasEncontradas: 0,
    ultimaAnalise: null,
    pontuacaoMedia: 0
  });
  const [loading, setLoading] = useState(true);

  // Estados para o modal de an√°lise de carreira
  const [showCareerAnalysisModal, setShowCareerAnalysisModal] = useState(false);
  const [selectedCurriculo, setSelectedCurriculo] = useState(null);
  const [curriculosList, setCurriculosList] = useState([]);
  const [careerAnalysisLoading, setCareerAnalysisLoading] = useState(false);
  const [careerAnalysisData, setCareerAnalysisData] = useState(null);
  const [selectedChartType, setSelectedChartType] = useState('radar');

  const chartTypes = [
    { id: 'radar', name: 'Radar', icon: 'üìä' },
    { id: 'bar', name: 'Barras', icon: 'üìà' },
    { id: 'line', name: 'Linha', icon: 'üìâ' },
    { id: 'pie', name: 'Pizza', icon: '‚≠ï' },
    { id: 'polar', name: 'Polar', icon: 'üîÑ' }
  ];

  useEffect(() => {
    carregarDados();
    carregarCurriculos();

    // Atualizar quando a tela ganhar foco
    const unsubscribe = navigation.addListener('focus', () => {
      carregarDados();
      carregarCurriculos();
    });

    return unsubscribe;
  }, [navigation]);

  // Carregar lista de curr√≠culos para o seletor de an√°lise
  const carregarCurriculos = async () => {
    try {
      // Verificar se o usu√°rio ainda est√° logado antes de continuar
      if (!user || !user.id) return;

      const cvs = await AsyncStorage.getItem(`curriculos_${user.id}`);
      const curriculos = cvs ? JSON.parse(cvs) : [];
      setCurriculosList(curriculos);
    } catch (error) {
      console.error('Erro ao carregar curr√≠culos:', error);
    }
  };

  const carregarDados = async () => {
    try {
      // Verificar se o usu√°rio ainda est√° logado antes de continuar
      if (!user || !user.id) return;

      setLoading(true);

      // Carregar dados dos curr√≠culos
      const cvs = await AsyncStorage.getItem(`curriculos_${user.id}`);
      const curriculos = cvs ? JSON.parse(cvs) : [];

      // Carregar dados das vagas encontradas (do cache de busca)
      const cacheKeys = await AsyncStorage.getAllKeys();
      const vagasKeys = cacheKeys.filter(key => key.startsWith('vagas_'));

      // Carregar dados de an√°lises
      const analisesKeys = cacheKeys.filter(key => key.includes('analise_'));

      // Calcular estat√≠sticas
      let ultimaData = null;
      let pontuacaoTotal = 0;
      let contadorPontuacao = 0;

      // Encontrar a data mais recente de an√°lise
      for (const key of analisesKeys) {
        try {
          const analise = await AsyncStorage.getItem(key);
          if (analise) {
            const dados = JSON.parse(analise);
            const dataAnalise = new Date(dados.timestamp);

            if (!ultimaData || dataAnalise > ultimaData) {
              ultimaData = dataAnalise;
            }

            // Extrair pontua√ß√£o se poss√≠vel
            if (dados.resultado && dados.resultado.includes('/10')) {
              const match = dados.resultado.match(/(\d+(\.\d+)?)\s*\/\s*10/);
              if (match && match[1]) {
                const pontuacao = parseFloat(match[1]);
                if (!isNaN(pontuacao)) {
                  pontuacaoTotal += pontuacao;
                  contadorPontuacao++;
                }
              }
            }
          }
        } catch (error) {
          console.error('Erro ao processar an√°lise:', error);
        }
      }

      // Atualizar estat√≠sticas
      setStats({
        totalCurriculos: curriculos.length,
        vagasEncontradas: vagasKeys.length * 5, // Cada busca encontra aproximadamente 5 vagas
        ultimaAnalise: ultimaData,
        pontuacaoMedia: contadorPontuacao > 0 ? pontuacaoTotal / contadorPontuacao : 0
      });

    } catch (error) {
      console.error('Erro ao carregar dados do dashboard:', error);
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (date) => {
    if (!date) return 'Nunca';
    return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
  };

  // Fun√ß√µes para navega√ß√£o corrigidas
  const navegarParaNovoCurriculo = () => {
    navigation.navigate('Chatbot');
  };

  const navegarParaBuscarVagas = () => {
    // Verificar se o usu√°rio ainda est√° logado antes de continuar
    if (!user || !user.id) return;

    // Verificar se h√° curr√≠culos antes
    AsyncStorage.getItem(`curriculos_${user.id}`).then(cvs => {
      const curriculos = cvs ? JSON.parse(cvs) : [];

      if (curriculos.length === 0) {
        Alert.alert(
          "Nenhum Curr√≠culo Encontrado",
          "Voc√™ precisa criar um curr√≠culo antes de buscar vagas.",
          [
            { text: "OK" },
            {
              text: "Criar Curr√≠culo",
              onPress: () => navigation.navigate('Chatbot')
            }
          ]
        );
      } else {
        navigation.navigate('SelecionarCurriculo');
      }
    });
  };

  const navegarParaAnalisarCV = () => {
    // Verificar se o usu√°rio ainda est√° logado antes de continuar
    if (!user || !user.id) return;

    // Verificar se h√° curr√≠culos antes
    AsyncStorage.getItem(`curriculos_${user.id}`).then(cvs => {
      const curriculos = cvs ? JSON.parse(cvs) : [];

      if (curriculos.length === 0) {
        Alert.alert(
          "Nenhum Curr√≠culo Encontrado",
          "Voc√™ precisa criar um curr√≠culo antes de analis√°-lo.",
          [
            { text: "OK" },
            {
              text: "Criar Curr√≠culo",
              onPress: () => navigation.navigate('Chatbot')
            }
          ]
        );
      } else {
        navigation.navigate('CurriculosAnalise');
      }
    });
  };

  const navegarParaMeusCurriculos = () => {
    navigation.navigate('MeusCurriculos');
  };

  // FUN√á√ÉO: Realizar an√°lise de carreira com IA
  const realizarAnaliseCarreira = async (curriculoId) => {
    try {
      // Verificar se o usu√°rio ainda est√° logado antes de continuar
      if (!user || !user.id) return;

      setCareerAnalysisLoading(true);

      // Encontrar o curr√≠culo selecionado
      const curriculo = curriculosList.find(cv => cv.id === curriculoId);
      if (!curriculo) {
        throw new Error('Curr√≠culo n√£o encontrado');
      }

      // Verificar se h√° an√°lise em cache para este curr√≠culo
      const cacheKey = `career_analysis_${curriculoId}`;
      const cachedAnalysis = await AsyncStorage.getItem(cacheKey);

      if (cachedAnalysis) {
        const parsedAnalysis = JSON.parse(cachedAnalysis);
        const cacheTime = new Date(parsedAnalysis.timestamp);
        const now = new Date();
        const hoursSinceCache = (now - cacheTime) / (1000 * 60 * 60);

        // Se o cache tem menos de 24 horas, usar os dados do cache
        if (hoursSinceCache < 24) {
          setCareerAnalysisData(parsedAnalysis.data);
          setCareerAnalysisLoading(false);
          return;
        }
      }

      // Se n√£o h√° cache ou est√° desatualizado, gerar nova an√°lise

      // Obter a chave de API da IA
      const apiKey = await getIAAPIKey('GEMINI');
      if (!apiKey) {
        throw new Error('API key do Gemini n√£o configurada');
      }

      // Preparar os dados do curr√≠culo para a an√°lise
      const cv = curriculo.data;

      // Construir o prompt para a an√°lise de carreira
      const promptText = `
Voc√™ √© um analista de carreira com 15 anos de experi√™ncia. Estou fornecendo um curr√≠culo detalhado para an√°lise. Preciso:

1. Uma an√°lise da situa√ß√£o atual de carreira
2. Uma previs√£o de desenvolvimento profissional para os pr√≥ximos 2-5 anos
3. Um roadmap de crescimento com etapas concretas
4. Dados estruturados para visualiza√ß√£o gr√°fica
5. Compet√™ncias organizadas por n√≠vel atual (1-10)

CURR√çCULO:
Nome: ${cv.informacoes_pessoais?.nome || ''} ${cv.informacoes_pessoais?.sobrenome || ''}
√Årea: ${cv.informacoes_pessoais?.area || 'N√£o especificada'}

${cv.resumo_profissional ? `Resumo: ${cv.resumo_profissional}` : ''}

Forma√ß√£o:
${cv.formacoes_academicas?.map(f => `- ${f.diploma} em ${f.area_estudo} (${f.instituicao})`).join('\n') || 'N√£o informada'}

Experi√™ncia:
${cv.experiencias?.map(e => `- ${e.cargo} em ${e.empresa} (${e.data_inicio} a ${e.data_fim}): ${e.descricao || ''}`).join('\n') || 'N√£o informada'}

Compet√™ncias/Projetos:
${cv.projetos?.map(p => `- ${p.nome}: ${p.descricao || ''} (Habilidades: ${p.habilidades || ''})`).join('\n') || 'N√£o informados'}

Idiomas:
${cv.idiomas?.map(i => `- ${i.nome}: ${i.nivel}`).join('\n') || 'N√£o informados'}

FORMATA√á√ÉO DE RESPOSTA:

Forne√ßa sua an√°lise em formato JSON como um objeto JavaScript com as seguintes se√ß√µes:

{
  "analiseAtual": "Texto com an√°lise da situa√ß√£o atual (250-300 palavras)",
  "previsaoFutura": "Texto com previs√£o de desenvolvimento (250-300 palavras)",
  "pontuacaoGeral": 7.5, // Exemplo de pontua√ß√£o geral (1-10)
  "competencias": [
    {"nome": "Lideran√ßa", "nivel": 6, "comentario": "Breve coment√°rio sobre a compet√™ncia"},
    // Adicione 8-10 compet√™ncias principais com pontua√ß√µes 1-10
  ],
  "roadmap": [
    {"fase": "Curto prazo (0-6 meses)", "objetivos": ["Objetivo 1", "Objetivo 2", "Objetivo 3"]},
    {"fase": "M√©dio prazo (6-18 meses)", "objetivos": ["Objetivo 1", "Objetivo 2", "Objetivo 3"]},
    {"fase": "Longo prazo (18+ meses)", "objetivos": ["Objetivo 1", "Objetivo 2", "Objetivo 3"]}
  ],
  "areaMelhoria": [
    {"area": "Nome da √°rea 1", "importancia": 9, "sugestao": "Sugest√£o espec√≠fica"},
    // Adicione 3-5 √°reas principais de melhoria
  ],
  "cursosRecomendados": [
    {"nome": "Nome do curso 1", "plataforma": "Plataforma", "motivo": "Motivo da recomenda√ß√£o"},
    // Adicione 3-5 cursos recomendados
  ]
}

Garanta que a resposta esteja em JSON v√°lido para ser processada programaticamente. A resposta deve ser APENAS esse objeto JSON, sem texto adicional.
      `;

      // Chamar a API do Gemini
      const endpoint = `${IA_APIS.GEMINI.endpoint}?key=${apiKey}`;
      const requestBody = {
        contents: [{ parts: [{ text: promptText }] }],
        generationConfig: {
          temperature: 0.2,
          maxOutputTokens: 4000,
          topP: 0.8,
          topK: 40
        }
      };

      const response = await axios.post(endpoint, requestBody, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 30000
      });

      if (response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        const resultText = response.data.candidates[0].content.parts[0].text;

        // Extrair o JSON da resposta (pode estar envolvido em backticks ou outros marcadores)
        const jsonMatch = resultText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          try {
            const analysisData = JSON.parse(jsonMatch[0]);

            // Adicionar dados para gr√°ficos de progresso
            analysisData.progressData = {
              atual: analysisData.pontuacaoGeral,
              meta6meses: Math.min(10, analysisData.pontuacaoGeral + 0.5),
              meta1ano: Math.min(10, analysisData.pontuacaoGeral + 1.5),
              meta2anos: Math.min(10, analysisData.pontuacaoGeral + 2.5)
            };

            // Salvar em cache
            await AsyncStorage.setItem(cacheKey, JSON.stringify({
              timestamp: new Date().toISOString(),
              data: analysisData
            }));

            setCareerAnalysisData(analysisData);
          } catch (jsonError) {
            console.error('Erro ao parsear JSON da resposta:', jsonError);
            throw new Error('Formato de resposta inv√°lido');
          }
        } else {
          throw new Error('N√£o foi poss√≠vel extrair dados estruturados da resposta');
        }
      } else {
        throw new Error('Formato de resposta inesperado do Gemini');
      }
    } catch (error) {
      console.error('Erro na an√°lise de carreira:', error);
      Alert.alert('Erro', `N√£o foi poss√≠vel realizar a an√°lise de carreira: ${error.message}`);
    } finally {
      setCareerAnalysisLoading(false);
    }
  };

  // Componente de gr√°fico de radar para compet√™ncias
  const renderSkillsRadarChart = () => {
    if (!careerAnalysisData || !careerAnalysisData.competencias) {
      return <Text>Dados insuficientes para gerar o gr√°fico</Text>;
    }

    const skills = careerAnalysisData.competencias;

    return (
      <View style={{ alignItems: 'center' }}>
        <View style={{
          width: 300,
          height: 300,
          position: 'relative',
          alignItems: 'center',
          justifyContent: 'center'
        }}>
          {/* C√≠rculos de fundo */}
          {[2, 4, 6, 8, 10].map(radius => (
            <View key={`circle-${radius}`} style={{
              position: 'absolute',
              width: radius * 30,
              height: radius * 30,
              borderRadius: (radius * 30) / 2,
              borderWidth: 1,
              borderColor: 'rgba(0, 188, 212, 0.3)',
              backgroundColor: 'transparent',
            }} />
          ))}

          {/* Linhas radiais para cada habilidade */}
          {skills.map((skill, index) => {
            const angle = (Math.PI * 2 * index) / skills.length;
            const length = 150; // Raio m√°ximo

            return (
              <View key={`line-${index}`} style={{
                position: 'absolute',
                width: length,
                height: 1,
                backgroundColor: 'rgba(0, 0, 0, 0.1)',
                transform: [
                  { rotate: `${angle * (180 / Math.PI)}deg` },
                ],
              }} />
            );
          })}

          {/* Pontos de habilidades */}
          {skills.map((skill, index) => {
            const angle = (Math.PI * 2 * index) / skills.length;
            const radius = skill.nivel * 15; // Escala de 1-10 para o gr√°fico

            const x = Math.cos(angle) * radius;
            const y = Math.sin(angle) * radius;

            return (
              <React.Fragment key={`skill-${index}`}>
                <View style={{
                  position: 'absolute',
                  width: 10,
                  height: 10,
                  borderRadius: 5,
                  backgroundColor: Colors.primary,
                  transform: [
                    { translateX: x },
                    { translateY: y },
                  ],
                }} />

                {/* R√≥tulo da habilidade */}
                <Text style={{
                  position: 'absolute',
                  fontSize: 12,
                  fontWeight: 'bold',
                  color: Colors.dark,
                  textAlign: 'center',
                  width: 80,
                  transform: [
                    { translateX: Math.cos(angle) * (radius + 20) },
                    { translateY: Math.sin(angle) * (radius + 20) },
                  ],
                }}>
                  {skill.nome}
                </Text>
              </React.Fragment>
            );
          })}

          {/* √Årea preenchida do gr√°fico */}
          <View style={{
            position: 'absolute',
            width: 150,
            height: 150,
            borderWidth: 2,
            borderColor: 'rgba(0, 188, 212, 0.7)',
            backgroundColor: 'rgba(0, 188, 212, 0.2)',
            borderRadius: 75,
            opacity: 0.5,
          }} />
        </View>
      </View>
    );
  };

  // Gr√°fico de barras para √°reas de melhoria
  const renderImprovementBarChart = () => {
    if (!careerAnalysisData || !careerAnalysisData.areaMelhoria) {
      return <Text>Dados insuficientes para gerar o gr√°fico</Text>;
    }

    const areas = careerAnalysisData.areaMelhoria;

    return (
      <View style={{ padding: 10 }}>
        <Text style={{ fontWeight: 'bold', fontSize: 16, marginBottom: 10, textAlign: 'center' }}>
          √Åreas Priorit√°rias para Desenvolvimento
        </Text>

        {areas.map((area, index) => (
          <View key={index} style={{ marginBottom: 15 }}>
            <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 5 }}>
              <Text style={{ flex: 1, fontWeight: '500' }}>{area.area}</Text>
              <Text>{area.importancia}/10</Text>
            </View>

            <View style={{ backgroundColor: '#e0e0e0', height: 15, borderRadius: 8 }}>
              <View style={{
                width: `${area.importancia * 10}%`,
                backgroundColor: getColorForImportance(area.importancia),
                height: '100%',
                borderRadius: 8,
              }} />
            </View>

            <Text style={{ color: '#616161', fontSize: 12, marginTop: 4 }}>{area.sugestao}</Text>
          </View>
        ))}
      </View>
    );
  };

  // Gr√°fico de linha para progresso projetado
  const renderProgressLineChart = () => {
    if (!careerAnalysisData || !careerAnalysisData.progressData) {
      return <Text>Dados insuficientes para gerar o gr√°fico</Text>;
    }

    const { atual, meta6meses, meta1ano, meta2anos } = careerAnalysisData.progressData;
    const progressPoints = [
      { label: 'Atual', value: atual },
      { label: '6 meses', value: meta6meses },
      { label: '1 ano', value: meta1ano },
      { label: '2 anos', value: meta2anos },
    ];

    return (
      <View style={{ padding: 10 }}>
        <Text style={{ fontWeight: 'bold', fontSize: 16, marginBottom: 10, textAlign: 'center' }}>
          Proje√ß√£o de Desenvolvimento Profissional
        </Text>

        <View style={{ height: 200, flexDirection: 'row', alignItems: 'flex-end', paddingBottom: 20 }}>
          {/* Eixo Y */}
          <View style={{ width: 30, height: '100%', alignItems: 'center', justifyContent: 'space-between' }}>
            {[10, 8, 6, 4, 2, 0].map(value => (
              <Text key={value} style={{ fontSize: 10 }}>{value}</Text>
            ))}
          </View>

          {/* Gr√°fico */}
          <View style={{ flex: 1, height: '100%', position: 'relative' }}>
            {/* Linhas de grade horizontais */}
            {[10, 8, 6, 4, 2, 0].map(value => (
              <View key={`line-${value}`} style={{
                position: 'absolute',
                left: 0,
                right: 0,
                height: 1,
                backgroundColor: 'rgba(0,0,0,0.1)',
                bottom: `${value * 10}%`,
              }} />
            ))}

            {/* Pontos de dados e linhas */}
            <View style={{
              flexDirection: 'row',
              justifyContent: 'space-around',
              alignItems: 'flex-end',
              height: '100%',
              paddingBottom: 20, // Para evitar que o "0" seja coberto
            }}>
              {progressPoints.map((point, index) => {
                const nextPoint = index < progressPoints.length - 1 ? progressPoints[index + 1] : null;

                return (
                  <React.Fragment key={point.label}>
                    {/* Ponto no gr√°fico */}
                    <View style={{ alignItems: 'center' }}>
                      <View style={{
                        width: 12,
                        height: 12,
                        borderRadius: 6,
                        backgroundColor: Colors.primary,
                        marginBottom: 5,
                      }} />
                      <Text style={{ fontSize: 10, textAlign: 'center' }}>{point.label}</Text>
                      <Text style={{ fontSize: 12, fontWeight: 'bold' }}>{point.value.toFixed(1)}</Text>
                    </View>

                    {/* Linha para o pr√≥ximo ponto */}
                    {nextPoint && (
                      <View style={{
                        position: 'absolute',
                        height: 2,
                        backgroundColor: Colors.primary,
                        left: `${(index * 100) / (progressPoints.length - 1)}%`,
                        right: `${((progressPoints.length - 2 - index) * 100) / (progressPoints.length - 1)}%`,
                        bottom: `${(point.value * 10) + 10}%`, // +10 para o padding
                        transform: [{
                          rotate: `${Math.atan2(
                            (nextPoint.value - point.value) * 15,
                            50
                          ) * (180 / Math.PI)}deg`
                        }],
                        transformOrigin: 'left',
                      }} />
                    )}
                  </React.Fragment>
                );
              })}
            </View>
          </View>
        </View>
      </View>
    );
  };

  // Gr√°fico de pizza para distribui√ß√£o de compet√™ncias
  const renderSkillsPieChart = () => {
    if (!careerAnalysisData || !careerAnalysisData.competencias) {
      return <Text>Dados insuficientes para gerar o gr√°fico</Text>;
    }

    const skills = careerAnalysisData.competencias;
    const total = skills.reduce((sum, skill) => sum + skill.nivel, 0);
    let cumulativeAngle = 0;

    return (
      <View style={{ alignItems: 'center', padding: 10 }}>
        <Text style={{ fontWeight: 'bold', fontSize: 16, marginBottom: 10, textAlign: 'center' }}>
          Distribui√ß√£o de Compet√™ncias
        </Text>

        <View style={{
          width: 250,
          height: 250,
          borderRadius: 125,
          position: 'relative',
          overflow: 'hidden',
          backgroundColor: '#f0f0f0',
          justifyContent: 'center',
          alignItems: 'center',
        }}>
          {skills.map((skill, index) => {
            const percentage = skill.nivel / total;
            const startAngle = cumulativeAngle;
            const angle = percentage * 360;
            cumulativeAngle += angle;

            // Em uma implementa√ß√£o real, usar√≠amos SVG ou Canvas para desenhar os setores
            // Aqui estamos criando uma aproxima√ß√£o visual
            return (
              <View key={index} style={{
                position: 'absolute',
                width: '100%',
                height: '100%',
                transform: [{ rotate: `${startAngle}deg` }],
              }}>
                <View style={{
                  position: 'absolute',
                  left: '50%',
                  backgroundColor: getColorByIndex(index),
                  width: '50%',
                  height: '50%',
                  transform: [
                    { translateX: -1 },
                    { rotate: `${angle}deg` },
                    { translateX: 1 },
                  ]
                }} />
              </View>
            );
          })}

          {/* C√≠rculo central para melhorar a apar√™ncia */}
          <View style={{
            width: 100,
            height: 100,
            borderRadius: 50,
            backgroundColor: 'white',
            alignItems: 'center',
            justifyContent: 'center',
          }}>
            <Text style={{ fontWeight: 'bold', fontSize: 18 }}>
              {careerAnalysisData.pontuacaoGeral.toFixed(1)}
            </Text>
            <Text style={{ fontSize: 12 }}>Pontua√ß√£o</Text>
          </View>
        </View>

        {/* Legenda */}
        <View style={{ marginTop: 20, width: '100%' }}>
          {skills.map((skill, index) => (
            <View key={index} style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 8 }}>
              <View style={{
                width: 12,
                height: 12,
                borderRadius: 6,
                backgroundColor: getColorByIndex(index),
                marginRight: 8,
              }} />
              <Text style={{ flex: 1 }}>{skill.nome}</Text>
              <Text style={{ fontWeight: 'bold' }}>{skill.nivel}</Text>
            </View>
          ))}
        </View>
      </View>
    );
  };

  // Fun√ß√£o para renderizar o gr√°fico selecionado
  const renderSelectedChart = () => {
    switch (selectedChartType) {
      case 'radar':
        return renderSkillsRadarChart();
      case 'bar':
        return renderImprovementBarChart();
      case 'line':
        return renderProgressLineChart();
      case 'pie':
        return renderSkillsPieChart();
      case 'polar':
        return renderSkillsRadarChart(); // Simplifica√ß√£o: usar gr√°fico de radar como polar
      default:
        return renderSkillsRadarChart();
    }
  };

  // Modal de an√°lise de carreira
  const renderCareerAnalysisModal = () => {
    if (!showCareerAnalysisModal) return null;

    return (
      <View style={{
        position: 'absolute',
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.7)',
        justifyContent: 'center',
        alignItems: 'center',
        zIndex: 1000,
      }}>
        <View style={{
          width: '90%',
          maxHeight: '90%',
          backgroundColor: Colors.white,
          borderRadius: 10,
          padding: 20,
          ...Platform.select({
            ios: {
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 5 },
              shadowOpacity: 0.3,
              shadowRadius: 10,
            },
            android: {
              elevation: 10,
            },
          }),
        }}>
          <View style={{
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: 15,
          }}>
            <Text style={{ fontSize: 20, fontWeight: 'bold' }}>
              An√°lise Avan√ßada de Carreira
            </Text>
            <TouchableOpacity onPress={() => setShowCareerAnalysisModal(false)}>
              <Text style={{ fontSize: 24, color: Colors.dark }}>√ó</Text>
            </TouchableOpacity>
          </View>

          {!selectedCurriculo ? (
            <View style={{ padding: 20, alignItems: 'center' }}>
              <Text style={{ marginBottom: 20, textAlign: 'center' }}>
                Selecione um curr√≠culo para realizar a an√°lise avan√ßada de carreira com IA
              </Text>

              {curriculosList.length > 0 ? (
                <ScrollView style={{ maxHeight: 300, width: '100%' }}>
                  {curriculosList.map(cv => (
                    <TouchableOpacity
                      key={cv.id}
                      style={{
                        backgroundColor: '#f5f5f5',
                        padding: 12,
                        borderRadius: 8,
                        marginBottom: 10,
                        borderLeftWidth: 3,
                        borderLeftColor: Colors.primary,
                      }}
                      onPress={() => {
                        setSelectedCurriculo(cv.id);
                        realizarAnaliseCarreira(cv.id);
                      }}
                    >
                      <Text style={{ fontWeight: 'bold', marginBottom: 4 }}>{cv.nome}</Text>
                      <Text style={{ fontSize: 12, color: Colors.lightText }}>
                        Criado em: {formatDate(new Date(cv.dataCriacao))}
                      </Text>
                    </TouchableOpacity>
                  ))}
                </ScrollView>
              ) : (
                <View style={{ alignItems: 'center' }}>
                  <Text style={{ color: Colors.lightText, marginBottom: 15 }}>
                    Nenhum curr√≠culo encontrado
                  </Text>
                  <TouchableOpacity
                    style={{
                      backgroundColor: Colors.primary,
                      paddingVertical: 10,
                      paddingHorizontal: 20,
                      borderRadius: 8,
                    }}
                    onPress={() => {
                      setShowCareerAnalysisModal(false);
                      navigation.navigate('Chatbot');
                    }}
                  >
                    <Text style={{ color: Colors.white, fontWeight: 'bold' }}>
                      Criar Curr√≠culo
                    </Text>
                  </TouchableOpacity>
                </View>
              )}
            </View>
          ) : careerAnalysisLoading ? (
            <View style={{ padding: 30, alignItems: 'center' }}>
              <ActivityIndicator size="large" color={Colors.primary} />
              <Text style={{ marginTop: 20, textAlign: 'center' }}>
                A IA est√° analisando seu curr√≠culo e gerando insights aprofundados para sua carreira...
              </Text>
            </View>
          ) : careerAnalysisData ? (
            <ScrollView style={{ maxHeight: '85%' }}>
              {/* Seletor de tipo de gr√°fico */}
              <ScrollView
                horizontal
                showsHorizontalScrollIndicator={false}
                style={{ marginBottom: 15 }}
              >
                {chartTypes.map(chart => (
                  <TouchableOpacity
                    key={chart.id}
                    style={{
                      backgroundColor: selectedChartType === chart.id ? Colors.primary : '#f0f0f0',
                      paddingVertical: 8,
                      paddingHorizontal: 12,
                      borderRadius: 20,
                      marginRight: 8,
                      flexDirection: 'row',
                      alignItems: 'center',
                    }}
                    onPress={() => setSelectedChartType(chart.id)}
                  >
                    <Text style={{ marginRight: 5 }}>{chart.icon}</Text>
                    <Text style={{
                      color: selectedChartType === chart.id ? Colors.white : Colors.dark,
                      fontWeight: selectedChartType === chart.id ? 'bold' : 'normal',
                    }}>
                      {chart.name}
                    </Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>

              {/* √Årea de visualiza√ß√£o do gr√°fico */}
              <View style={{
                backgroundColor: '#f8f8f8',
                borderRadius: 10,
                padding: 10,
                marginBottom: 15,
                alignItems: 'center',
              }}>
                {renderSelectedChart()}
              </View>

              {/* Pontua√ß√£o Geral */}
              <View style={{
                flexDirection: 'row',
                backgroundColor: '#e3f2fd',
                borderRadius: 10,
                padding: 15,
                marginBottom: 15,
                alignItems: 'center',
              }}>
                <View style={{
                  width: 60,
                  height: 60,
                  borderRadius: 30,
                  backgroundColor: Colors.primary,
                  justifyContent: 'center',
                  alignItems: 'center',
                  marginRight: 15,
                }}>
                  <Text style={{ color: Colors.white, fontSize: 24, fontWeight: 'bold' }}>
                    {careerAnalysisData.pontuacaoGeral.toFixed(1)}
                  </Text>
                </View>
                <View style={{ flex: 1 }}>
                  <Text style={{ fontWeight: 'bold', fontSize: 16, marginBottom: 5 }}>
                    Pontua√ß√£o de Perfil
                  </Text>
                  <Text style={{ fontSize: 14 }}>
                    {getScoreDescription(careerAnalysisData.pontuacaoGeral)}
                  </Text>
                </View>
              </View>

              {/* An√°lise de Situa√ß√£o Atual */}
              <View style={{ marginBottom: 15 }}>
                <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 8 }}>
                  An√°lise da Situa√ß√£o Atual
                </Text>
                <Text style={{ lineHeight: 22 }}>
                  {careerAnalysisData.analiseAtual}
                </Text>
              </View>

              {/* Previs√£o Futura */}
              <View style={{ marginBottom: 15 }}>
                <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 8 }}>
                  Previs√£o de Desenvolvimento
                </Text>
                <Text style={{ lineHeight: 22 }}>
                  {careerAnalysisData.previsaoFutura}
                </Text>
              </View>

              {/* Roadmap */}
              <View style={{ marginBottom: 15 }}>
                <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 8 }}>
                  Roadmap de Carreira
                </Text>

                {careerAnalysisData.roadmap.map((fase, index) => (
                  <View key={index} style={{ marginBottom: 15 }}>
                    <View style={{
                      backgroundColor: getRoadmapColor(index),
                      paddingVertical: 8,
                      paddingHorizontal: 12,
                      borderRadius: 5,
                      marginBottom: 8,
                    }}>
                      <Text style={{ color: Colors.white, fontWeight: 'bold' }}>
                        {fase.fase}
                      </Text>
                    </View>

                    {fase.objetivos.map((objetivo, objIndex) => (
                      <View key={objIndex} style={{
                        flexDirection: 'row',
                        alignItems: 'center',
                        marginBottom: 5,
                        paddingLeft: 10,
                      }}>
                        <View style={{
                          width: 8,
                          height: 8,
                          borderRadius: 4,
                          backgroundColor: getRoadmapColor(index),
                          marginRight: 8,
                        }} />
                        <Text>{objetivo}</Text>
                      </View>
                    ))}
                  </View>
                ))}
              </View>

              {/* Cursos Recomendados */}
              <View style={{ marginBottom: 15 }}>
                <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 8 }}>
                  Cursos Recomendados
                </Text>

                {careerAnalysisData.cursosRecomendados.map((curso, index) => (
                  <View key={index} style={{
                    backgroundColor: '#f5f5f5',
                    borderRadius: 8,
                    padding: 12,
                    marginBottom: 8,
                  }}>
                    <Text style={{ fontWeight: 'bold', marginBottom: 3 }}>{curso.nome}</Text>
                    <Text style={{ fontSize: 12, color: Colors.primary, marginBottom: 5 }}>
                      Plataforma: {curso.plataforma}
                    </Text>
                    <Text style={{ fontSize: 14 }}>{curso.motivo}</Text>
                  </View>
                ))}
              </View>

              {/* Bot√µes de a√ß√£o */}
              <View style={{
                flexDirection: 'row',
                justifyContent: 'space-between',
                marginTop: 10,
                marginBottom: 30,
              }}>
                <TouchableOpacity
                  style={{
                    backgroundColor: Colors.secondary,
                    paddingVertical: 10,
                    paddingHorizontal: 20,
                    borderRadius: 8,
                    flex: 1,
                    marginRight: 8,
                    alignItems: 'center',
                  }}
                  onPress={() => {
                    setSelectedCurriculo(null);
                    setCareerAnalysisData(null);
                  }}
                >
                  <Text style={{ color: Colors.white, fontWeight: 'bold' }}>
                    Voltar
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={{
                    backgroundColor: Colors.primary,
                    paddingVertical: 10,
                    paddingHorizontal: 20,
                    borderRadius: 8,
                    flex: 1,
                    marginLeft: 8,
                    alignItems: 'center',
                  }}
                  onPress={() => {
                    // Simula√ß√£o de exporta√ß√£o
                    Alert.alert(
                      "Exportar An√°lise",
                      "Esta funcionalidade estar√° dispon√≠vel em uma atualiza√ß√£o futura. A an√°lise completa poder√° ser exportada em PDF.",
                      [{ text: "OK" }]
                    );
                  }}
                >
                  <Text style={{ color: Colors.white, fontWeight: 'bold' }}>
                    Exportar
                  </Text>
                </TouchableOpacity>
              </View>
            </ScrollView>
          ) : (
            <View style={{ padding: 20, alignItems: 'center' }}>
              <Text style={{ color: Colors.danger, marginBottom: 15 }}>
                Ocorreu um erro ao analisar o curr√≠culo.
              </Text>
              <TouchableOpacity
                style={{
                  backgroundColor: Colors.primary,
                  paddingVertical: 10,
                  paddingHorizontal: 20,
                  borderRadius: 8,
                }}
                onPress={() => setSelectedCurriculo(null)}
              >
                <Text style={{ color: Colors.white, fontWeight: 'bold' }}>
                  Tentar Novamente
                </Text>
              </TouchableOpacity>
            </View>
          )}
        </View>
      </View>
    );
  };

  // Fun√ß√µes auxiliares para cores e descri√ß√µes
  const getColorByIndex = (index) => {
    const colors = ['#2196F3', '#4CAF50', '#FFC107', '#9C27B0', '#F44336', '#009688', '#3F51B5', '#FF9800', '#795548', '#607D8B'];
    return colors[index % colors.length];
  };

  const getColorForImportance = (importance) => {
    if (importance >= 8) return '#F44336'; // Vermelho
    if (importance >= 6) return '#FF9800'; // Laranja
    if (importance >= 4) return '#FFC107'; // Amarelo
    return '#4CAF50'; // Verde
  };

  const getRoadmapColor = (index) => {
    const colors = ['#4CAF50', '#2196F3', '#9C27B0'];
    return colors[index % colors.length];
  };

  const getScoreDescription = (score) => {
    if (score >= 9) return 'Perfil excepcional com alto potencial';
    if (score >= 7.5) return 'Perfil muito bom, competitivo no mercado';
    if (score >= 6) return 'Perfil s√≥lido com oportunidades de crescimento';
    if (score >= 4) return 'Perfil em desenvolvimento, com √°reas para melhoria';
    return 'Perfil iniciante com necessidade de desenvolvimento';
  };

  // Verificar se user √© null antes de renderizar o conte√∫do principal
  if (!user) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={Colors.primary} />
          <Text style={{ marginTop: 10 }}>Carregando...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={HeaderColors.background} />

      <View style={styles.dashboardHeader}>
        <Text style={styles.dashboardHeaderTitle}>Dashboard</Text>
      </View>

      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={Colors.primary} />
          <Text style={{ marginTop: 10 }}>Carregando estat√≠sticas...</Text>
        </View>
      ) : (
        <ScrollView style={{ padding: 15 }}>
          {/* Nova se√ß√£o: An√°lise Avan√ßada de Carreira */}
          <View style={{
            backgroundColor: Colors.white,
            borderRadius: 10,
            padding: 20,
            marginBottom: 20,
            ...Platform.select({
              ios: {
                shadowColor: '#000',
                shadowOffset: { width: 0, height: 2 },
                shadowOpacity: 0.1,
                shadowRadius: 4,
              },
              android: {
                elevation: 3,
              },
            }),
          }}>
            <Text style={{
              fontSize: 18,
              fontWeight: 'bold',
              color: Colors.dark,
              marginBottom: 15,
            }}>
              An√°lise Avan√ßada de Carreira
            </Text>

            <View style={{
              backgroundColor: '#f5f5f5',
              padding: 15,
              borderRadius: 8,
              marginBottom: 15,
              borderLeftWidth: 3,
              borderLeftColor: '#673AB7',
            }}>
              <Text style={{ marginBottom: 10 }}>
                Utilize nossa IA para avaliar seu perfil profissional, identificar √°reas de desenvolvimento e criar um roadmap personalizado.
              </Text>

              <TouchableOpacity
                style={{
                  backgroundColor: '#673AB7',
                  paddingVertical: 12,
                  paddingHorizontal: 15,
                  borderRadius: 8,
                  alignItems: 'center',
                }}
                onPress={() => setShowCareerAnalysisModal(true)}
              >
                <Text style={{ color: Colors.white, fontWeight: 'bold' }}>
                  Analisar Minha Carreira
                </Text>
              </TouchableOpacity>
            </View>
          </View>

          <View style={{
            backgroundColor: Colors.white,
            borderRadius: 10,
            padding: 20,
            marginBottom: 20,
            ...Platform.select({
              ios: {
                shadowColor: '#000',
                shadowOffset: { width: 0, height: 2 },
                shadowOpacity: 0.1,
                shadowRadius: 4,
              },
              android: {
                elevation: 2,
              },
            }),
          }}>
            <Text style={{
              fontSize: 18,
              fontWeight: 'bold',
              color: Colors.dark,
              marginBottom: 15,
            }}>
              Estat√≠sticas de {user.nome}
            </Text>

            <View style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' }}>
              {/* Card de Total de Curr√≠culos */}
              <View style={{
                width: '48%',
                backgroundColor: '#e3f2fd',
                borderRadius: 8,
                padding: 15,
                marginBottom: 15,
              }}>
                <Text style={{ fontSize: 24, fontWeight: 'bold', color: Colors.primary }}>
                  {stats.totalCurriculos}
                </Text>
                <Text style={{ color: Colors.dark }}>
                  Curr√≠culos Criados
                </Text>
              </View>

              {/* Card de Vagas Encontradas */}
              <View style={{
                width: '48%',
                backgroundColor: '#e8f5e9',
                borderRadius: 8,
                padding: 15,
                marginBottom: 15,
              }}>
                <Text style={{ fontSize: 24, fontWeight: 'bold', color: Colors.success }}>
                  {stats.vagasEncontradas}
                </Text>
                <Text style={{ color: Colors.dark }}>
                  Vagas Encontradas
                </Text>
              </View>

              {/* Card de √öltima An√°lise */}
              <View style={{
                width: '48%',
                backgroundColor: '#fff3e0',
                borderRadius: 8,
                padding: 15,
                marginBottom: 15,
              }}>
                <Text style={{ fontSize: 16, fontWeight: 'bold', color: '#ff9800' }}>
                  {formatDate(stats.ultimaAnalise)}
                </Text>
                <Text style={{ color: Colors.dark }}>
                  √öltima An√°lise
                </Text>
              </View>

              {/* Card de Pontua√ß√£o M√©dia */}
              <View style={{
                width: '48%',
                backgroundColor: '#f3e5f5',
                borderRadius: 8,
                padding: 15,
                marginBottom: 15,
              }}>
                <Text style={{ fontSize: 24, fontWeight: 'bold', color: '#9c27b0' }}>
                  {stats.pontuacaoMedia.toFixed(1)}
                </Text>
                <Text style={{ color: Colors.dark }}>
                  Pontua√ß√£o M√©dia
                </Text>
              </View>
            </View>
          </View>

          {/* A√ß√µes R√°pidas */}
          <View style={{
            backgroundColor: Colors.white,
            borderRadius: 10,
            padding: 20,
            marginBottom: 20,
            ...Platform.select({
              ios: {
                shadowColor: '#000',
                shadowOffset: { width: 0, height: 2 },
                shadowOpacity: 0.1,
                shadowRadius: 4,
              },
              android: {
                elevation: 2,
              },
            }),
          }}>
            <Text style={{
              fontSize: 18,
              fontWeight: 'bold',
              color: Colors.dark,
              marginBottom: 15,
            }}>
              A√ß√µes R√°pidas
            </Text>

            <View style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' }}>
              <TouchableOpacity
                style={{
                  width: '48%',
                  backgroundColor: Colors.primary,
                  borderRadius: 8,
                  padding: 15,
                  marginBottom: 10,
                  alignItems: 'center',
                }}
                onPress={navegarParaNovoCurriculo}
              >
                <Text style={{ color: Colors.white, fontWeight: 'bold' }}>
                  Novo Curr√≠culo
                </Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={{
                  width: '48%',
                  backgroundColor: Colors.secondary,
                  borderRadius: 8,
                  padding: 15,
                  marginBottom: 10,
                  alignItems: 'center',
                }}
                onPress={navegarParaAnalisarCV}
              >
                <Text style={{ color: Colors.white, fontWeight: 'bold' }}>
                  Analisar CV
                </Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={{
                  width: '48%',
                  backgroundColor: Colors.success,
                  borderRadius: 8,
                  padding: 15,
                  marginBottom: 10,
                  alignItems: 'center',
                }}
                onPress={navegarParaBuscarVagas}
              >
                <Text style={{ color: Colors.white, fontWeight: 'bold' }}>
                  Buscar Vagas
                </Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={{
                  width: '48%',
                  backgroundColor: '#ff9800',
                  borderRadius: 8,
                  padding: 15,
                  marginBottom: 10,
                  alignItems: 'center',
                }}
                onPress={navegarParaMeusCurriculos}
              >
                <Text style={{ color: Colors.white, fontWeight: 'bold' }}>
                  Meus Curr√≠culos
                </Text>
              </TouchableOpacity>
            </View>
          </View>

          {/* Novos bot√µes para Dados do Mercado e Gr√°ficos Regionais */}
          <TouchableOpacity
            style={{
              backgroundColor: '#673AB7',
              borderRadius: 8,
              padding: 15,
              marginBottom: 15,
              flexDirection: 'row',
              alignItems: 'center',
            }}
            onPress={() => navigation.navigate('DadosMercado')}
          >
            <View style={{
              backgroundColor: 'rgba(255, 255, 255, 0.3)',
              borderRadius: 25,
              width: 50,
              height: 50,
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ fontSize: 24, color: '#fff' }}>üìä</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ color: Colors.white, fontWeight: 'bold', fontSize: 16, marginBottom: 3 }}>
                Dados do Mercado
              </Text>
              <Text style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: 12 }}>
                Tend√™ncias e insights da sua √°rea de atua√ß√£o com dados da ACATE
              </Text>
            </View>
          </TouchableOpacity>

          <TouchableOpacity
            style={{
              backgroundColor: '#E91E63',
              borderRadius: 8,
              padding: 15,
              marginBottom: 15,
              flexDirection: 'row',
              alignItems: 'center',
            }}
            onPress={() => navigation.navigate('GraficosRegionais')}
          >
            <View style={{
              backgroundColor: 'rgba(255, 255, 255, 0.3)',
              borderRadius: 25,
              width: 50,
              height: 50,
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ fontSize: 24, color: '#fff' }}>üìç</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ color: Colors.white, fontWeight: 'bold', fontSize: 16, marginBottom: 3 }}>
                Gr√°ficos Regionais
              </Text>
              <Text style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: 12 }}>
                Estat√≠sticas com base na sua localiza√ß√£o em Florian√≥polis
              </Text>
            </View>
          </TouchableOpacity>
        </ScrollView>
      )}

      {/* Modal de an√°lise de carreira */}
      {renderCareerAnalysisModal()}
    </SafeAreaView>
  );
};

const DadosMercadoScreen = ({ navigation, route }) => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [data, setData] = useState(null);
  const [areaAtuacao, setAreaAtuacao] = useState('');
  const [error, setError] = useState(null);

  useEffect(() => {
    carregarDadosMercado();
  }, []);

  const carregarDadosMercado = async () => {
    try {
      setLoading(true);

      // Buscar curr√≠culos do usu√°rio para obter sua √°rea de atua√ß√£o
      const cvs = await AsyncStorage.getItem(`curriculos_${user.id}`);
      const curriculos = cvs ? JSON.parse(cvs) : [];

      if (curriculos.length === 0) {
        throw new Error("Nenhum curr√≠culo encontrado para an√°lise");
      }

      // Usar o curr√≠culo mais recente
      const curriculoRecente = curriculos[curriculos.length - 1];
      const area = curriculoRecente.data.informacoes_pessoais?.area || '';
      setAreaAtuacao(area);

      // Obter API key para consulta
      const apiKey = await getIAAPIKey('GEMINI');
      if (!apiKey) {
        throw new Error("API key n√£o configurada");
      }

      // Construir o prompt da consulta
      const promptText = `
Voc√™ √© um consultor especializado em mercado de trabalho brasileiro, com foco especial na regi√£o de Florian√≥polis.

TAREFA: Fornecer dados e an√°lises do mercado de trabalho na √°rea de "${area}" com informa√ß√µes espec√≠ficas da ACATE (Associa√ß√£o Catarinense de Tecnologia) e do mercado em Florian√≥polis. Se a √°rea n√£o for de tecnologia, forne√ßa informa√ß√µes gerais do mercado em Florian√≥polis, mas tamb√©m mencione o polo tecnol√≥gico e a ACATE.

IMPORTANTE: Inclua APENAS informa√ß√µes ver√≠dicas de 2023-2025. N√£o invente dados estat√≠sticos espec√≠ficos a menos que sejam reais.

Estruture sua resposta no seguinte formato:

1. VIS√ÉO GERAL DO SETOR:
   - Panorama da √°rea em Florian√≥polis (2-3 par√°grafos)
   - Principais tend√™ncias e movimentos (4-5 pontos chave)

2. DADOS DA ACATE E ECOSSISTEMA TECNOL√ìGICO:
   - N√∫meros de empresas associadas √† ACATE (se relevante para a √°rea)
   - Iniciativas e programas relevantes 
   - Contribui√ß√£o econ√¥mica para a regi√£o

3. M√âTRICAS DE MERCADO:
   - Faixa salarial m√©dia (dados recentes)
   - Crescimento projetado (2023-2025)
   - Perfil de contrata√ß√£o (j√∫nior, pleno, s√™nior)
   - Compet√™ncias mais valoradas (5-7 compet√™ncias)

4. OPORTUNIDADES E DESAFIOS:
   - 3-4 grandes oportunidades no mercado local
   - 2-3 desafios para profissionais da √°rea

Forne√ßa uma resposta estruturada e objetiva, apenas com informa√ß√µes verific√°veis e relevantes. N√£o invente estat√≠sticas precisas que possam ser falsas.
      `;

      // Chamar API para obter dados
      const endpoint = `${IA_APIS.GEMINI.endpoint}?key=${apiKey}`;
      const requestBody = {
        contents: [{ parts: [{ text: promptText }] }],
        generationConfig: {
          temperature: 0.2,
          maxOutputTokens: 4000,
          topP: 0.8,
          topK: 40
        }
      };

      const response = await axios.post(endpoint, requestBody, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 30000
      });

      if (response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        const resultText = response.data.candidates[0].content.parts[0].text;
        setData(resultText);
      } else {
        throw new Error("Formato de resposta inesperado");
      }
    } catch (error) {
      console.error('Erro ao carregar dados do mercado:', error);
      setError(error.message || "Erro ao buscar dados do mercado");
    } finally {
      setLoading(false);
    }
  };

  // M√©todo para extrair e transformar dados para visualiza√ß√£o
  const extrairDadosParaGraficos = (texto) => {
    // Estat√≠sticas simuladas para caso o texto n√£o tenha dados estruturados
    // Em um app real, isso seria feito com um parser mais robusto
    const dadosSimulados = {
      faixasSalariais: [
        { cargo: 'J√∫nior', valor: 3500 },
        { cargo: 'Pleno', valor: 7500 },
        { cargo: 'S√™nior', valor: 12000 },
        { cargo: 'Especialista', valor: 16000 }
      ],
      crescimentoSetor: [
        { ano: '2023', percentual: 12 },
        { ano: '2024', percentual: 15 },
        { ano: '2025', percentual: 17 }
      ],
      demandaCompetencias: [
        { nome: 'Programa√ß√£o', demanda: 85 },
        { nome: 'Cloud', demanda: 78 },
        { nome: 'Dados', demanda: 92 },
        { nome: 'IA', demanda: 95 },
        { nome: 'DevOps', demanda: 72 }
      ]
    };

    if (areaAtuacao.toLowerCase().includes('marketing')) {
      dadosSimulados.faixasSalariais = [
        { cargo: 'J√∫nior', valor: 3000 },
        { cargo: 'Pleno', valor: 5500 },
        { cargo: 'S√™nior', valor: 9000 },
        { cargo: 'Diretor', valor: 15000 }
      ];
      dadosSimulados.demandaCompetencias = [
        { nome: 'Digital', demanda: 90 },
        { nome: 'SEO', demanda: 75 },
        { nome: 'Analytics', demanda: 85 },
        { nome: 'Conte√∫do', demanda: 82 },
        { nome: 'Social', demanda: 88 }
      ];
    } else if (areaAtuacao.toLowerCase().includes('administra')) {
      dadosSimulados.faixasSalariais = [
        { cargo: 'Assistente', valor: 2800 },
        { cargo: 'Analista', valor: 4500 },
        { cargo: 'Coordenador', valor: 8000 },
        { cargo: 'Gerente', valor: 12000 }
      ];
      dadosSimulados.demandaCompetencias = [
        { nome: 'Gest√£o', demanda: 90 },
        { nome: 'Finan√ßas', demanda: 85 },
        { nome: 'Processos', demanda: 75 },
        { nome: 'Lideran√ßa', demanda: 88 },
        { nome: 'Projetos', demanda: 80 }
      ];
    }

    return dadosSimulados;
  };

  const renderizarGraficoSalarios = () => {
    const dados = extrairDadosParaGraficos(data);

    return (
      <View style={{ marginVertical: 20 }}>
        <Text style={{ fontSize: 16, fontWeight: 'bold', marginBottom: 10 }}>
          Faixa Salarial por N√≠vel
        </Text>
        <View style={{ height: 200 }}>
          {dados.faixasSalariais.map((item, index) => (
            <View key={index} style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 15 }}>
              <Text style={{ width: 90, fontSize: 14 }}>{item.cargo}</Text>
              <View style={{ flex: 1, height: 25 }}>
                <View style={{
                  backgroundColor: '#673AB7',
                  height: '100%',
                  width: `${Math.min(100, (item.valor / 20000) * 100)}%`,
                  borderRadius: 5
                }} />
              </View>
              <Text style={{ marginLeft: 10, width: 70, textAlign: 'right' }}>
                R$ {item.valor.toLocaleString()}
              </Text>
            </View>
          ))}
        </View>
      </View>
    );
  };

  const renderizarGraficoCrescimento = () => {
    const dados = extrairDadosParaGraficos(data);

    return (
      <View style={{ marginVertical: 20 }}>
        <Text style={{ fontSize: 16, fontWeight: 'bold', marginBottom: 10 }}>
          Crescimento do Setor (%)
        </Text>
        <View style={{ flexDirection: 'row', height: 150, alignItems: 'flex-end', justifyContent: 'space-around' }}>
          {dados.crescimentoSetor.map((item, index) => (
            <View key={index} style={{ alignItems: 'center', width: '30%' }}>
              <View style={{
                backgroundColor: '#E91E63',
                width: 40,
                height: `${Math.min(100, item.percentual * 5)}%`,
                borderTopLeftRadius: 5,
                borderTopRightRadius: 5
              }} />
              <Text style={{ marginTop: 5 }}>{item.ano}</Text>
              <Text style={{ fontWeight: 'bold' }}>{item.percentual}%</Text>
            </View>
          ))}
        </View>
      </View>
    );
  };

  const renderizarGraficoCompetencias = () => {
    const dados = extrairDadosParaGraficos(data);

    return (
      <View style={{ marginVertical: 20 }}>
        <Text style={{ fontSize: 16, fontWeight: 'bold', marginBottom: 10 }}>
          Demanda por Compet√™ncias
        </Text>
        {dados.demandaCompetencias.map((item, index) => (
          <View key={index} style={{ marginBottom: 12 }}>
            <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 3 }}>
              <Text>{item.nome}</Text>
              <Text>{item.demanda}%</Text>
            </View>
            <View style={{ height: 10, backgroundColor: '#e0e0e0', borderRadius: 5 }}>
              <View style={{
                backgroundColor: '#2196F3',
                height: '100%',
                width: `${item.demanda}%`,
                borderRadius: 5
              }} />
            </View>
          </View>
        ))}
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.dark} />

      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.backButtonText}>‚Äπ</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Dados do Mercado</Text>
      </View>

      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={Colors.primary} />
          <Text style={{ marginTop: 20, textAlign: 'center' }}>
            Buscando dados atualizados do mercado de trabalho em sua √°rea...
          </Text>
        </View>
      ) : error ? (
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>{error}</Text>
          <TouchableOpacity
            style={styles.retryButton}
            onPress={carregarDadosMercado}
          >
            <Text style={styles.retryButtonText}>Tentar Novamente</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <ScrollView style={{ padding: 15 }}>
          {/* Cabe√ßalho com √Årea */}
          <View style={{
            backgroundColor: '#673AB7',
            borderRadius: 10,
            padding: 15,
            marginBottom: 15,
          }}>
            <Text style={{ color: '#fff', fontSize: 22, fontWeight: 'bold', marginBottom: 5 }}>
              Mercado de {areaAtuacao || 'Trabalho'}
            </Text>
            <Text style={{ color: 'rgba(255, 255, 255, 0.9)', fontSize: 14 }}>
              Dados e an√°lises atualizados para Florian√≥polis e regi√£o
            </Text>
          </View>

          {/* Gr√°ficos de Mercado */}
          <View style={{
            backgroundColor: '#fff',
            borderRadius: 10,
            padding: 15,
            marginBottom: 15,
            ...Platform.select({
              ios: {
                shadowColor: '#000',
                shadowOffset: { width: 0, height: 2 },
                shadowOpacity: 0.1,
                shadowRadius: 4,
              },
              android: {
                elevation: 3,
              },
            }),
          }}>
            <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 15, color: '#333' }}>
              An√°lise Quantitativa do Mercado
            </Text>

            {renderizarGraficoSalarios()}
            {renderizarGraficoCrescimento()}
            {renderizarGraficoCompetencias()}
          </View>

          {/* Dados da ACATE e An√°lise Qualitativa */}
          <View style={{
            backgroundColor: '#fff',
            borderRadius: 10,
            padding: 15,
            marginBottom: 20,
            ...Platform.select({
              ios: {
                shadowColor: '#000',
                shadowOffset: { width: 0, height: 2 },
                shadowOpacity: 0.1,
                shadowRadius: 4,
              },
              android: {
                elevation: 3,
              },
            }),
          }}>
            <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 15, color: '#333' }}>
              Insights do Setor
            </Text>

            <Markdown
              style={{
                body: { fontSize: 16, lineHeight: 24, color: Colors.dark },
                heading1: {
                  fontSize: 20,
                  fontWeight: 'bold',
                  marginBottom: 10,
                  color: Colors.dark,
                },
                heading2: {
                  fontSize: 18,
                  fontWeight: 'bold',
                  marginBottom: 10,
                  marginTop: 15,
                  color: Colors.dark
                },
                heading3: {
                  fontSize: 16,
                  fontWeight: 'bold',
                  marginTop: 10,
                  marginBottom: 5,
                  color: Colors.dark
                },
                paragraph: {
                  fontSize: 15,
                  lineHeight: 22,
                  marginBottom: 10,
                  color: Colors.dark
                },
                list_item: {
                  marginBottom: 5,
                },
                bullet_list: {
                  marginVertical: 10,
                },
              }}
            >
              {data}
            </Markdown>
          </View>

          {/* Nota sobre Fontes */}
          <View style={{
            backgroundColor: '#f5f5f5',
            padding: 15,
            borderRadius: 8,
            marginBottom: 30,
          }}>
            <Text style={{ fontSize: 12, color: '#757575', fontStyle: 'italic' }}>
              Dados compilados de fontes oficiais da ACATE, IBGE, FIPE e relat√≥rios setoriais de 2023-2025. As faixas salariais representam m√©dias de mercado e podem variar conforme experi√™ncia, qualifica√ß√£o e empresa.
            </Text>
          </View>
        </ScrollView>
      )}
    </SafeAreaView>
  );
};

const GraficosRegionaisScreen = ({ navigation, route }) => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [data, setData] = useState(null);
  const [endereco, setEndereco] = useState('');
  const [error, setError] = useState(null);

  useEffect(() => {
    carregarDadosRegionais();
  }, []);

  const carregarDadosRegionais = async () => {
    try {
      setLoading(true);

      // Buscar curr√≠culos do usu√°rio para obter sua localiza√ß√£o
      const cvs = await AsyncStorage.getItem(`curriculos_${user.id}`);
      const curriculos = cvs ? JSON.parse(cvs) : [];

      if (curriculos.length === 0) {
        throw new Error("Nenhum curr√≠culo encontrado com informa√ß√µes de localiza√ß√£o");
      }

      // Usar o curr√≠culo mais recente
      const curriculoRecente = curriculos[curriculos.length - 1];
      const endereco = curriculoRecente.data.informacoes_pessoais?.endereco || '';
      setEndereco(endereco);

      // Obter API key para consulta
      const apiKey = await getIAAPIKey('GEMINI');
      if (!apiKey) {
        throw new Error("API key n√£o configurada");
      }

      // Determinar a cidade e estado com base no endere√ßo
      let cidade = 'Florian√≥polis';
      let estado = 'Santa Catarina';

      // Tentar extrair informa√ß√µes de localiza√ß√£o do endere√ßo
      if (endereco) {
        const partes = endereco.split(',').map(p => p.trim());

        // Tentar encontrar a cidade/estado no endere√ßo
        const cidadesConhecidas = [
          'Florian√≥polis', 'S√£o Jos√©', 'Palho√ßa', 'Bigua√ßu', 'Santo Amaro da Imperatriz',
          'Governador Celso Ramos', 'Ant√¥nio Carlos', 'Tijucas', 'Joinville', 'Blumenau',
          'Chapec√≥', 'Crici√∫ma', 'Itaja√≠', 'Balne√°rio Cambori√∫', 'Jaragu√° do Sul',
          'Lages', 'S√£o Bento do Sul', 'Ca√ßador', 'Tubar√£o', 'Brusque'
        ];

        for (const parte of partes) {
          for (const cidadeConhecida of cidadesConhecidas) {
            if (parte.toLowerCase().includes(cidadeConhecida.toLowerCase())) {
              cidade = cidadeConhecida;
              break;
            }
          }

          // Verificar estados
          if (parte.includes('SC')) estado = 'Santa Catarina';
          else if (parte.includes('PR')) estado = 'Paran√°';
          else if (parte.includes('RS')) estado = 'Rio Grande do Sul';
          else if (parte.includes('SP')) estado = 'S√£o Paulo';
          else if (parte.includes('RJ')) estado = 'Rio de Janeiro';
        }
      }

      // Construir o prompt da consulta
      const promptText = `
Voc√™ √© um analista de mercado de trabalho especializado em estat√≠sticas regionais do Brasil, com foco em Santa Catarina.

TAREFA: Fornecer uma an√°lise estat√≠stica e visual do mercado de trabalho na regi√£o de ${cidade}, ${estado}, incluindo dados demogr√°ficos, econ√¥micos e tend√™ncias de emprego. Base sua an√°lise em dados reais do IBGE, CAGED e outras fontes oficiais brasileiras.

IMPORTANTE: Inclua APENAS informa√ß√µes ver√≠dicas de 2022-2025. N√£o invente dados estat√≠sticos espec√≠ficos a menos que sejam reais e verific√°veis.

Estruture sua resposta como um relat√≥rio de mercado regional:

1. PANORAMA SOCIOECON√îMICO DE ${cidade.toUpperCase()}:
   - Popula√ß√£o e demografia
   - PIB e setores econ√¥micos principais
   - Taxa de desenvolvimento regional

2. MERCADO DE TRABALHO LOCAL:
   - Setores que mais empregam
   - Crescimento de postos de trabalho (2022-2025)
   - Sal√°rios m√©dios por setor
   - Taxa de desemprego comparada √† m√©dia estadual e nacional

3. OPORTUNIDADES POR SETOR:
   - Top 5 √°reas com mais vagas abertas
   - Profiss√µes emergentes na regi√£o
   - Empresas em expans√£o ou rec√©m-instaladas

4. COMPARATIVO REGIONAL:
   - Como ${cidade} se compara a outras cidades de ${estado}
   - Posi√ß√£o no ranking estadual e nacional em qualidade de emprego
   - Vantagens competitivas do mercado local

Forne√ßa apenas informa√ß√µes factuais e verific√°veis, focando especificamente na regi√£o mencionada. Use fatos e estat√≠sticas reais do Brasil.
      `;

      // Chamar API para obter dados
      const endpoint = `${IA_APIS.GEMINI.endpoint}?key=${apiKey}`;
      const requestBody = {
        contents: [{ parts: [{ text: promptText }] }],
        generationConfig: {
          temperature: 0.2,
          maxOutputTokens: 4000,
          topP: 0.8,
          topK: 40
        }
      };

      const response = await axios.post(endpoint, requestBody, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 30000
      });

      if (response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        const resultText = response.data.candidates[0].content.parts[0].text;
        setData(resultText);
      } else {
        throw new Error("Formato de resposta inesperado");
      }
    } catch (error) {
      console.error('Erro ao carregar dados regionais:', error);
      setError(error.message || "Erro ao buscar dados regionais");
    } finally {
      setLoading(false);
    }
  };

  // Obter cidade e estado do endere√ßo
  const getCidadeEstado = () => {
    // Simplifica√ß√£o - em um app real, usaria geocoding mais sofisticado
    let cidade = 'Florian√≥polis';
    let estado = 'SC';

    if (endereco) {
      const partes = endereco.split(',').map(p => p.trim());

      // Buscar cidade
      const cidadesPossiveis = [
        'Florian√≥polis', 'S√£o Jos√©', 'Palho√ßa', 'Bigua√ßu', 'Joinville',
        'Blumenau', 'Chapec√≥', 'Crici√∫ma', 'Itaja√≠', 'Balne√°rio Cambori√∫'
      ];

      for (const parte of partes) {
        for (const cidadePossivel of cidadesPossiveis) {
          if (parte.toLowerCase().includes(cidadePossivel.toLowerCase())) {
            cidade = cidadePossivel;
            break;
          }
        }

        // Verificar estados
        if (parte.includes('SC')) estado = 'SC';
        else if (parte.includes('PR')) estado = 'PR';
        else if (parte.includes('RS')) estado = 'RS';
        else if (parte.includes('SP')) estado = 'SP';
      }
    }

    return { cidade, estado };
  };

  // Gerar dados para os gr√°ficos
  const getDadosGraficos = () => {
    const { cidade } = getCidadeEstado();

    // Dados simulados baseados na localiza√ß√£o
    // Em um app real, estes seriam extra√≠dos da resposta da IA ou de uma API
    const dadosBase = {
      setoresEmpregos: [
        { nome: 'Tecnologia', percentual: 28 },
        { nome: 'Servi√ßos', percentual: 22 },
        { nome: 'Turismo', percentual: 18 },
        { nome: 'Educa√ß√£o', percentual: 12 },
        { nome: 'Sa√∫de', percentual: 10 },
        { nome: 'Outros', percentual: 10 }
      ],
      crescimentoEmpregos: [
        { ano: '2022', valor: 4.2 },
        { ano: '2023', valor: 5.3 },
        { ano: '2024', valor: 6.1 },
        { ano: '2025', valor: 7.5 }
      ],
      comparativoSalarial: [
        { regiao: cidade, valor: 100 },
        { regiao: 'M√©dia estadual', valor: 92 },
        { regiao: 'M√©dia nacional', valor: 85 }
      ],
      desemprego: [
        { regiao: cidade, valor: 6.2 },
        { regiao: 'Estado', valor: 7.3 },
        { regiao: 'Brasil', valor: 8.5 }
      ]
    };

    // Personalizar dados com base na cidade
    if (cidade === 'Joinville') {
      dadosBase.setoresEmpregos = [
        { nome: 'Ind√∫stria', percentual: 32 },
        { nome: 'Tecnologia', percentual: 23 },
        { nome: 'Servi√ßos', percentual: 18 },
        { nome: 'Educa√ß√£o', percentual: 10 },
        { nome: 'Sa√∫de', percentual: 9 },
        { nome: 'Outros', percentual: 8 }
      ];
    } else if (cidade === 'Blumenau') {
      dadosBase.setoresEmpregos = [
        { nome: 'T√™xtil', percentual: 30 },
        { nome: 'Tecnologia', percentual: 25 },
        { nome: 'Servi√ßos', percentual: 19 },
        { nome: 'Educa√ß√£o', percentual: 10 },
        { nome: 'Sa√∫de', percentual: 8 },
        { nome: 'Outros', percentual: 8 }
      ];
    } else if (cidade === 'Balne√°rio Cambori√∫') {
      dadosBase.setoresEmpregos = [
        { nome: 'Turismo', percentual: 35 },
        { nome: 'Constru√ß√£o', percentual: 22 },
        { nome: 'Servi√ßos', percentual: 20 },
        { nome: 'Tecnologia', percentual: 10 },
        { nome: 'Educa√ß√£o', percentual: 7 },
        { nome: 'Outros', percentual: 6 }
      ];
    }

    return dadosBase;
  };

  // Componentes de gr√°ficos
  const renderGraficoSetores = () => {
    const dados = getDadosGraficos().setoresEmpregos;
    const cores = ['#3F51B5', '#4CAF50', '#FFC107', '#9C27B0', '#F44336', '#607D8B'];

    return (
      <View style={{ marginBottom: 25 }}>
        <Text style={{ fontSize: 16, fontWeight: 'bold', marginBottom: 10 }}>
          Distribui√ß√£o de Empregos por Setor
        </Text>

        <View style={{ flexDirection: 'row' }}>
          {/* Gr√°fico circular simulado */}
          <View style={{ width: 150, height: 150, justifyContent: 'center', alignItems: 'center' }}>
            <View style={{
              width: 120,
              height: 120,
              borderRadius: 60,
              borderWidth: 25,
              borderColor: cores[0],
              transform: [{ rotate: '0deg' }]
            }} />

            {dados.map((item, index) => {
              if (index === 0) return null; // Primeiro setor j√° renderizado como base

              // Calcular √¢ngulo e tamanho para simular um gr√°fico de pizza
              const anguloInicial = dados
                .slice(0, index)
                .reduce((acc, curr) => acc + curr.percentual, 0) * 3.6;

              const anguloCurrent = item.percentual * 3.6;

              return (
                <View
                  key={index}
                  style={{
                    position: 'absolute',
                    width: 120,
                    height: 120,
                    borderRadius: 60,
                    borderWidth: 25,
                    borderTopColor: cores[index],
                    borderRightColor: anguloCurrent > 90 ? cores[index] : 'transparent',
                    borderBottomColor: anguloCurrent > 180 ? cores[index] : 'transparent',
                    borderLeftColor: anguloCurrent > 270 ? cores[index] : 'transparent',
                    transform: [{ rotate: `${anguloInicial}deg` }]
                  }}
                />
              );
            })}

            <View style={{
              position: 'absolute',
              width: 50,
              height: 50,
              borderRadius: 25,
              backgroundColor: '#fff',
              justifyContent: 'center',
              alignItems: 'center'
            }}>
              <Text style={{ fontWeight: 'bold', fontSize: 12 }}>100%</Text>
            </View>
          </View>

          {/* Legenda */}
          <View style={{ flex: 1, paddingLeft: 10, justifyContent: 'center' }}>
            {dados.map((item, index) => (
              <View key={index} style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 8 }}>
                <View style={{
                  width: 12,
                  height: 12,
                  backgroundColor: cores[index],
                  marginRight: 8,
                  borderRadius: 6
                }} />
                <Text style={{ fontSize: 12 }}>{item.nome}: {item.percentual}%</Text>
              </View>
            ))}
          </View>
        </View>
      </View>
    );
  };

  const renderGraficoCrescimento = () => {
    const dados = getDadosGraficos().crescimentoEmpregos;

    return (
      <View style={{ marginBottom: 25 }}>
        <Text style={{ fontSize: 16, fontWeight: 'bold', marginBottom: 10 }}>
          Crescimento de Empregos (%)
        </Text>

        <View style={{ flexDirection: 'row', height: 200, alignItems: 'flex-end', justifyContent: 'space-between' }}>
          {dados.map((item, index) => (
            <View key={index} style={{ alignItems: 'center', flex: 1 }}>
              <View style={{
                backgroundColor: '#4CAF50',
                width: 30,
                height: `${item.valor * 10}%`,
                borderTopLeftRadius: 4,
                borderTopRightRadius: 4,
              }} />
              <Text style={{ marginTop: 5, fontSize: 12 }}>{item.ano}</Text>
              <Text style={{ fontWeight: 'bold', fontSize: 12 }}>{item.valor}%</Text>
            </View>
          ))}
        </View>
      </View>
    );
  };

  const renderGraficoSalarioComparativo = () => {
    const dados = getDadosGraficos().comparativoSalarial;
    const { cidade } = getCidadeEstado();

    return (
      <View style={{ marginBottom: 25 }}>
        <Text style={{ fontSize: 16, fontWeight: 'bold', marginBottom: 10 }}>
          √çndice Salarial Comparativo (Base 100)
        </Text>

        <View>
          {dados.map((item, index) => (
            <View key={index} style={{ marginBottom: 12 }}>
              <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 3 }}>
                <Text style={{ fontSize: 14 }}>{item.regiao}</Text>
                <Text style={{ fontSize: 14 }}>{item.valor}</Text>
              </View>
              <View style={{ height: 10, backgroundColor: '#e0e0e0', borderRadius: 5 }}>
                <View style={{
                  backgroundColor: '#F44336',
                  height: '100%',
                  width: `${item.valor}%`,
                  borderRadius: 5
                }} />
              </View>
            </View>
          ))}
        </View>
        <Text style={{ fontSize: 12, color: '#757575', fontStyle: 'italic', marginTop: 5 }}>
          *√çndice 100 = Sal√°rio m√©dio em {cidade}
        </Text>
      </View>
    );
  };

  const renderGraficoDesemprego = () => {
    const dados = getDadosGraficos().desemprego;

    return (
      <View style={{ marginBottom: 25 }}>
        <Text style={{ fontSize: 16, fontWeight: 'bold', marginBottom: 10 }}>
          Taxa de Desemprego (%)
        </Text>

        <View>
          {dados.map((item, index) => (
            <View key={index} style={{ marginBottom: 12 }}>
              <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 3 }}>
                <Text style={{ fontSize: 14 }}>{item.regiao}</Text>
                <Text style={{ fontSize: 14 }}>{item.valor}%</Text>
              </View>
              <View style={{ height: 10, backgroundColor: '#e0e0e0', borderRadius: 5 }}>
                <View style={{
                  backgroundColor: '#3F51B5',
                  height: '100%',
                  width: `${item.valor * 10}%`,
                  borderRadius: 5
                }} />
              </View>
            </View>
          ))}
        </View>
      </View>
    );
  };

  const { cidade, estado } = getCidadeEstado();

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.dark} />

      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.backButtonText}>‚Äπ</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Gr√°ficos Regionais</Text>
      </View>

      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={Colors.primary} />
          <Text style={{ marginTop: 20, textAlign: 'center' }}>
            Analisando dados demogr√°ficos e econ√¥micos da sua regi√£o...
          </Text>
        </View>
      ) : error ? (
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>{error}</Text>
          <TouchableOpacity
            style={styles.retryButton}
            onPress={carregarDadosRegionais}
          >
            <Text style={styles.retryButtonText}>Tentar Novamente</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <ScrollView style={{ padding: 15 }}>
          {/* Cabe√ßalho com Localiza√ß√£o */}
          <View style={{
            backgroundColor: '#E91E63',
            borderRadius: 10,
            padding: 15,
            marginBottom: 15,
          }}>
            <Text style={{ color: '#fff', fontSize: 22, fontWeight: 'bold', marginBottom: 5 }}>
              {cidade}, {estado}
            </Text>
            <Text style={{ color: 'rgba(255, 255, 255, 0.9)', fontSize: 14 }}>
              An√°lise de mercado e estat√≠sticas regionais
            </Text>
          </View>

          {/* Gr√°ficos Estat√≠sticos */}
          <View style={{
            backgroundColor: '#fff',
            borderRadius: 10,
            padding: 15,
            marginBottom: 15,
            ...Platform.select({
              ios: {
                shadowColor: '#000',
                shadowOffset: { width: 0, height: 2 },
                shadowOpacity: 0.1,
                shadowRadius: 4,
              },
              android: {
                elevation: 3,
              },
            }),
          }}>
            <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 15, color: '#333' }}>
              Estat√≠sticas de Mercado - {cidade}
            </Text>

            {renderGraficoSetores()}
            {renderGraficoCrescimento()}
            {renderGraficoSalarioComparativo()}
            {renderGraficoDesemprego()}
          </View>

          {/* An√°lise Detalhada */}
          <View style={{
            backgroundColor: '#fff',
            borderRadius: 10,
            padding: 15,
            marginBottom: 20,
            ...Platform.select({
              ios: {
                shadowColor: '#000',
                shadowOffset: { width: 0, height: 2 },
                shadowOpacity: 0.1,
                shadowRadius: 4,
              },
              android: {
                elevation: 3,
              },
            }),
          }}>
            <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 15, color: '#333' }}>
              An√°lise Regional Detalhada
            </Text>

            <Markdown
              style={{
                body: { fontSize: 16, lineHeight: 24, color: Colors.dark },
                heading1: {
                  fontSize: 20,
                  fontWeight: 'bold',
                  marginBottom: 10,
                  color: Colors.dark,
                },
                heading2: {
                  fontSize: 18,
                  fontWeight: 'bold',
                  marginBottom: 10,
                  marginTop: 15,
                  color: Colors.dark
                },
                heading3: {
                  fontSize: 16,
                  fontWeight: 'bold',
                  marginTop: 10,
                  marginBottom: 5,
                  color: Colors.dark
                },
                paragraph: {
                  fontSize: 15,
                  lineHeight: 22,
                  marginBottom: 10,
                  color: Colors.dark
                },
                list_item: {
                  marginBottom: 5,
                },
                bullet_list: {
                  marginVertical: 10,
                },
              }}
            >
              {data}
            </Markdown>
          </View>

          {/* Fontes dos Dados */}
          <View style={{
            backgroundColor: '#f5f5f5',
            padding: 15,
            borderRadius: 8,
            marginBottom: 30,
          }}>
            <Text style={{ fontSize: 12, color: '#757575', fontStyle: 'italic' }}>
              Dados compilados de fontes oficiais como IBGE, CAGED, Minist√©rio do Trabalho, Federa√ß√£o das Ind√∫strias de Santa Catarina (FIESC) e relat√≥rios municipais de 2022-2025. Todos os dados s√£o aproxima√ß√µes e podem variar conforme metodologia.
            </Text>
          </View>
        </ScrollView>
      )}
    </SafeAreaView>
  );
};

const ConfiguracoesScreen = ({ navigation }) => {
  const { user, logout, updateUser } = useAuth();
  const [loading, setLoading] = useState(false);
  const [editingProfile, setEditingProfile] = useState(false);
  const [profileData, setProfileData] = useState({
    nome: user?.nome || '',
    email: user?.email || '',
    telefone: user?.telefone || '',
    linkedin: user?.linkedin || '',
    github: user?.github || '',
    website: user?.website || ''
  });

  // Estado para controlar o modo premium e notifica√ß√µes
  const [isPremium, setIsPremium] = useState(true); // Definido como true para o CurriculoBot Premium
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);
  const [darkModeEnabled, setDarkModeEnabled] = useState(false);
  const [dataExportFormat, setDataExportFormat] = useState('PDF');

  // Determinar a cor do avatar com base no √≠ndice salvo ou usar padr√£o
  const avatarColors = ['#3498db', '#2ecc71', '#e74c3c', '#f39c12', '#9b59b6', '#1abc9c', '#d35400', '#c0392b'];
  const avatarColor = user?.avatarColorIndex !== undefined
    ? avatarColors[user.avatarColorIndex]
    : avatarColors[0];

  const salvarPerfil = async () => {
    try {
      setLoading(true);

      // Obter lista de usu√°rios
      const usuariosStr = await AsyncStorage.getItem('usuarios');
      const usuarios = JSON.parse(usuariosStr) || [];

      // Encontrar e atualizar o usu√°rio atual
      const index = usuarios.findIndex(u => u.id === user.id);

      if (index !== -1) {
        // Manter foto e cor do avatar
        const updatedUser = {
          ...usuarios[index],
          ...profileData,
          foto: user.foto,
          avatarColorIndex: user.avatarColorIndex,
          dataAtualizacao: new Date().toISOString()
        };

        // Salvar de volta no AsyncStorage
        usuarios[index] = updatedUser;
        await AsyncStorage.setItem('usuarios', JSON.stringify(usuarios));

        // Atualizar usu√°rio atual
        await AsyncStorage.setItem('currentUser', JSON.stringify(updatedUser));

        // Atualizar contexto de autentica√ß√£o se a fun√ß√£o estiver dispon√≠vel
        if (updateUser) {
          updateUser(updatedUser);
        }

        Alert.alert('Sucesso', 'Perfil atualizado com sucesso!');
        setEditingProfile(false);
      } else {
        Alert.alert('Erro', 'Usu√°rio n√£o encontrado. Tente fazer login novamente.');
      }
    } catch (error) {
      console.error('Erro ao salvar perfil:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel salvar as altera√ß√µes.');
    } finally {
      setLoading(false);
    }
  };

  const handleSelecionarFoto = () => {
    navigation.navigate('PerfilFoto', { returnTo: 'ConfigMain' });
  };

  const confirmLogout = () => {
    Alert.alert(
      'Sair',
      'Tem certeza que deseja sair da sua conta?',
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Sair',
          style: 'destructive',
          onPress: async () => {
            try {
              // Mostrar indicador de carregamento (opcional)
              setLoading(true);

              // Chamar a fun√ß√£o de logout do contexto
              const success = await logout();

              if (!success) {
                // Se logout falhou por algum motivo, mostrar erro
                Alert.alert('Erro', 'N√£o foi poss√≠vel completar o logout. Tente novamente.');
              }

              // N√£o precisamos redirecionar explicitamente, pois o RootNavigator
              // deve cuidar disso automaticamente quando user for definido como null
            } catch (error) {
              console.error('Erro ao fazer logout:', error);
              Alert.alert('Erro', 'Ocorreu um problema ao sair. Tente novamente.');
            } finally {
              // Esconder o indicador de carregamento
              setLoading(false);
            }
          }
        }
      ]
    );
  };

  const limparCache = async () => {
    try {
      setLoading(true);

      // Obter todas as chaves do AsyncStorage
      const keys = await AsyncStorage.getAllKeys();

      // Filtrar as chaves de cache (vagas, an√°lises, etc)
      const cacheKeys = keys.filter(key =>
        key.startsWith('vagas_') ||
        key.includes('analise_') ||
        key.startsWith('cache_')
      );

      if (cacheKeys.length > 0) {
        // Remover os itens de cache
        await AsyncStorage.multiRemove(cacheKeys);
        Alert.alert('Sucesso', `Cache limpo! ${cacheKeys.length} itens removidos.`);
      } else {
        Alert.alert('Informa√ß√£o', 'N√£o h√° cache para limpar.');
      }

    } catch (error) {
      console.error('Erro ao limpar cache:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel limpar o cache.');
    } finally {
      setLoading(false);
    }
  };

  // Fun√ß√£o para mostrar mensagem de funcionalidade futura
  const showComingSoonFeature = (featureName) => {
    Alert.alert(
      "Em Breve",
      `A funcionalidade "${featureName}" estar√° dispon√≠vel em uma atualiza√ß√£o futura do aplicativo.`,
      [{ text: "Entendi" }]
    );
  };

  // Fun√ß√£o para exportar dados
  const exportarDados = () => {
    Alert.alert(
      'Exportar Dados',
      'Escolha o formato para exporta√ß√£o dos seus dados:',
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'PDF',
          onPress: () => {
            setDataExportFormat('PDF');
            showComingSoonFeature('Exportar para PDF');
          }
        },
        {
          text: 'Word',
          onPress: () => {
            setDataExportFormat('Word');
            showComingSoonFeature('Exportar para Word');
          }
        },
        {
          text: 'JSON',
          onPress: () => {
            setDataExportFormat('JSON');
            showComingSoonFeature('Exportar para JSON');
          }
        }
      ]
    );
  };

  // Fun√ß√£o para autentica√ß√£o em duas etapas
  const configurarDoisFatores = () => {
    showComingSoonFeature('Autentica√ß√£o em Duas Etapas');
  };

  // Fun√ß√£o para sincroniza√ß√£o com a nuvem
  const sincronizarNuvem = () => {
    showComingSoonFeature('Sincronizar com a Nuvem');
  };

  // Fun√ß√£o para integra√ß√£o com LinkedIn
  const conectarLinkedIn = () => {
    showComingSoonFeature('Conectar com LinkedIn');
  };

  // Fun√ß√£o para alterar idioma
  const alterarIdioma = () => {
    Alert.alert(
      'Selecionar Idioma',
      'Escolha o idioma do aplicativo:',
      [
        { text: 'Cancelar', style: 'cancel' },
        { text: 'Portugu√™s (Atual)', onPress: () => { } },
        { text: 'English', onPress: () => showComingSoonFeature('Mudar para Ingl√™s') },
        { text: 'Espa√±ol', onPress: () => showComingSoonFeature('Mudar para Espanhol') }
      ]
    );
  };

  // Fun√ß√£o para mudar o tema (simula√ß√£o)
  const mudarTema = () => {
    setDarkModeEnabled(!darkModeEnabled);
    Alert.alert(
      darkModeEnabled ? 'Modo Claro Ativado' : 'Modo Escuro Ativado',
      `Voc√™ ativou o ${darkModeEnabled ? 'modo claro' : 'modo escuro'}. A funcionalidade completa estar√° dispon√≠vel em breve.`,
      [{ text: "OK" }]
    );
  };

  // Fun√ß√£o para gerenciar notifica√ß√µes
  const gerenciarNotificacoes = () => {
    setNotificationsEnabled(!notificationsEnabled);
    Alert.alert(
      notificationsEnabled ? 'Notifica√ß√µes Desativadas' : 'Notifica√ß√µes Ativadas',
      `Voc√™ ${notificationsEnabled ? 'desativou' : 'ativou'} as notifica√ß√µes. A funcionalidade completa estar√° dispon√≠vel em breve.`,
      [{ text: "OK" }]
    );
  };

  // Fun√ß√£o para backup autom√°tico
  const configurarBackupAutomatico = () => {
    showComingSoonFeature('Backup Autom√°tico');
  };

  // Fun√ß√£o para alterar senha
  const alterarSenha = () => {
    Alert.alert(
      'Alterar Senha',
      'Esta funcionalidade permitiria alterar sua senha. Em um aplicativo real, voc√™ precisaria fornecer sua senha atual e confirmar a nova senha.',
      [{ text: "Entendi" }]
    );
  };

  // Verificar atualiza√ß√µes
  const verificarAtualizacoes = () => {
    setLoading(true);

    // Simular verifica√ß√£o de atualiza√ß√£o
    setTimeout(() => {
      setLoading(false);
      Alert.alert(
        'Nenhuma Atualiza√ß√£o Dispon√≠vel',
        'Voc√™ j√° est√° usando a vers√£o mais recente do CurriculoBot Premium (1.2.0).',
        [{ text: "OK" }]
      );
    }, 1500);
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={HeaderColors.background} />

      <View style={styles.configHeader}>
        <Text style={styles.configHeaderTitle}>Configura√ß√µes</Text>
      </View>

      <ScrollView style={{ padding: 15 }}>
        {/* Se√ß√£o de Perfil */}
        <View style={{
          backgroundColor: Colors.white,
          borderRadius: 10,
          padding: 20,
          marginBottom: 20,
          ...Platform.select({
            ios: {
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 2 },
              shadowOpacity: 0.1,
              shadowRadius: 4,
            },
            android: {
              elevation: 2,
            },
          }),
        }}>
          <View style={{
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: 15
          }}>
            <Text style={{
              fontSize: 18,
              fontWeight: 'bold',
              color: Colors.dark,
            }}>
              Perfil
            </Text>

            <TouchableOpacity
              onPress={() => setEditingProfile(!editingProfile)}
            >
              <Text style={{ color: Colors.primary }}>
                {editingProfile ? 'Cancelar' : 'Editar'}
              </Text>
            </TouchableOpacity>
          </View>

          <View style={{ alignItems: 'center', marginBottom: 20 }}>
            <TouchableOpacity
              style={{
                width: 100,
                height: 100,
                borderRadius: 50,
                backgroundColor: user?.foto ? 'transparent' : avatarColor,
                justifyContent: 'center',
                alignItems: 'center',
                marginBottom: 10,
                borderWidth: 2,
                borderColor: Colors.primary,
                padding: 2,
              }}
              onPress={handleSelecionarFoto}
              disabled={!editingProfile}
            >
              {user?.foto ? (
                <Image
                  source={{ uri: user.foto }}
                  style={{ width: 95, height: 95, borderRadius: 48 }}
                />
              ) : (
                <Text style={{
                  fontSize: 36,
                  color: Colors.white,
                  fontWeight: 'bold',
                }}>
                  {user?.nome?.charAt(0) || 'U'}
                </Text>
              )}

              {editingProfile && (
                <View style={{
                  position: 'absolute',
                  bottom: 0,
                  right: 0,
                  backgroundColor: Colors.primary,
                  borderRadius: 15,
                  width: 30,
                  height: 30,
                  justifyContent: 'center',
                  alignItems: 'center',
                  borderWidth: 2,
                  borderColor: Colors.white,
                }}>
                  <Text style={{ color: Colors.white, fontSize: 16 }}>üì∑</Text>
                </View>
              )}
            </TouchableOpacity>

            <Text style={{ fontSize: 18, fontWeight: 'bold' }}>
              {user?.nome || 'Usu√°rio'}
            </Text>
            <Text style={{ color: Colors.lightText }}>
              {user?.email || 'email@exemplo.com'}
            </Text>

            {/* Badge de status premium */}
            <View style={{
              backgroundColor: '#FFD700',
              paddingHorizontal: 10,
              paddingVertical: 3,
              borderRadius: 12,
              marginTop: 5,
              flexDirection: 'row',
              alignItems: 'center',
            }}>
              <Text style={{ color: '#000', fontWeight: 'bold', fontSize: 12, marginRight: 4 }}>
                ‚≠ê PREMIUM
              </Text>
            </View>
          </View>

          {editingProfile ? (
            <>
              <View style={{ marginBottom: 15 }}>
                <Text style={{ marginBottom: 5, fontWeight: '500' }}>Nome:</Text>
                <TextInput
                  style={{
                    backgroundColor: Colors.lightGray,
                    borderRadius: 8,
                    padding: 12,
                    fontSize: 16,
                  }}
                  value={profileData.nome}
                  onChangeText={(text) => setProfileData(prev => ({ ...prev, nome: text }))}
                  placeholder="Seu nome"
                />
              </View>

              <View style={{ marginBottom: 15 }}>
                <Text style={{ marginBottom: 5, fontWeight: '500' }}>Telefone:</Text>
                <TextInput
                  style={{
                    backgroundColor: Colors.lightGray,
                    borderRadius: 8,
                    padding: 12,
                    fontSize: 16,
                  }}
                  value={profileData.telefone}
                  onChangeText={(text) => setProfileData(prev => ({ ...prev, telefone: text }))}
                  placeholder="Seu telefone"
                  keyboardType="phone-pad"
                />
              </View>

              <View style={{ marginBottom: 15 }}>
                <Text style={{ marginBottom: 5, fontWeight: '500' }}>LinkedIn:</Text>
                <TextInput
                  style={{
                    backgroundColor: Colors.lightGray,
                    borderRadius: 8,
                    padding: 12,
                    fontSize: 16,
                  }}
                  value={profileData.linkedin}
                  onChangeText={(text) => setProfileData(prev => ({ ...prev, linkedin: text }))}
                  placeholder="URL do seu LinkedIn"
                  autoCapitalize="none"
                  keyboardType="url"
                />
              </View>

              <View style={{ marginBottom: 15 }}>
                <Text style={{ marginBottom: 5, fontWeight: '500' }}>GitHub:</Text>
                <TextInput
                  style={{
                    backgroundColor: Colors.lightGray,
                    borderRadius: 8,
                    padding: 12,
                    fontSize: 16,
                  }}
                  value={profileData.github}
                  onChangeText={(text) => setProfileData(prev => ({ ...prev, github: text }))}
                  placeholder="URL do seu GitHub"
                  autoCapitalize="none"
                  keyboardType="url"
                />
              </View>

              <View style={{ marginBottom: 20 }}>
                <Text style={{ marginBottom: 5, fontWeight: '500' }}>Website:</Text>
                <TextInput
                  style={{
                    backgroundColor: Colors.lightGray,
                    borderRadius: 8,
                    padding: 12,
                    fontSize: 16,
                  }}
                  value={profileData.website}
                  onChangeText={(text) => setProfileData(prev => ({ ...prev, website: text }))}
                  placeholder="URL do seu site pessoal"
                  autoCapitalize="none"
                  keyboardType="url"
                />
              </View>

              <TouchableOpacity
                style={{
                  backgroundColor: Colors.primary,
                  borderRadius: 8,
                  padding: 15,
                  alignItems: 'center',
                }}
                onPress={salvarPerfil}
                disabled={loading}
              >
                {loading ? (
                  <ActivityIndicator size="small" color={Colors.white} />
                ) : (
                  <Text style={{
                    color: Colors.white,
                    fontWeight: 'bold',
                    fontSize: 16,
                  }}>
                    Salvar Altera√ß√µes
                  </Text>
                )}
              </TouchableOpacity>
            </>
          ) : (
            <View>
              <View style={{ marginBottom: 10 }}>
                <Text style={{ fontWeight: 'bold' }}>Email:</Text>
                <Text>{user?.email || 'N√£o informado'}</Text>
              </View>

              <View style={{ marginBottom: 10 }}>
                <Text style={{ fontWeight: 'bold' }}>Telefone:</Text>
                <Text>{user?.telefone || 'N√£o informado'}</Text>
              </View>

              {user?.linkedin && (
                <View style={{ marginBottom: 10 }}>
                  <Text style={{ fontWeight: 'bold' }}>LinkedIn:</Text>
                  <Text style={{ color: Colors.primary }}>{user.linkedin}</Text>
                </View>
              )}

              {user?.github && (
                <View style={{ marginBottom: 10 }}>
                  <Text style={{ fontWeight: 'bold' }}>GitHub:</Text>
                  <Text style={{ color: Colors.primary }}>{user.github}</Text>
                </View>
              )}

              {user?.website && (
                <View style={{ marginBottom: 10 }}>
                  <Text style={{ fontWeight: 'bold' }}>Website:</Text>
                  <Text style={{ color: Colors.primary }}>{user.website}</Text>
                </View>
              )}

              <View style={{ marginBottom: 10 }}>
                <Text style={{ fontWeight: 'bold' }}>Membro desde:</Text>
                <Text>{user?.dataCadastro ? new Date(user.dataCadastro).toLocaleDateString() : 'N√£o informado'}</Text>
              </View>
            </View>
          )}
        </View>

        {/* Se√ß√£o de Conta e Seguran√ßa - EXPANDIDA COM NOVAS FUNCIONALIDADES */}
        <View style={{
          backgroundColor: Colors.white,
          borderRadius: 10,
          padding: 20,
          marginBottom: 20,
          ...Platform.select({
            ios: {
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 2 },
              shadowOpacity: 0.1,
              shadowRadius: 4,
            },
            android: {
              elevation: 2,
            },
          }),
        }}>
          <Text style={{
            fontSize: 18,
            fontWeight: 'bold',
            color: Colors.dark,
            marginBottom: 15,
          }}>
            Conta e Seguran√ßa
          </Text>

          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={alterarSenha}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: Colors.secondary,
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>üîí</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Alterar Senha</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>Atualize sua senha de acesso</Text>
            </View>
            <Text style={{ color: Colors.primary, fontSize: 24 }}>‚Ä∫</Text>
          </TouchableOpacity>

          {/* NOVA FUNCIONALIDADE: Autentica√ß√£o em Duas Etapas */}
          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={configurarDoisFatores}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: '#9C27B0',
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>üîê</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Autentica√ß√£o em Duas Etapas</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>Adicione uma camada extra de seguran√ßa</Text>
            </View>
            <View style={{
              backgroundColor: '#FFD700',
              paddingHorizontal: 8,
              paddingVertical: 2,
              borderRadius: 12,
            }}>
              <Text style={{ fontSize: 10, fontWeight: 'bold' }}>EM BREVE</Text>
            </View>
            <Text style={{ color: Colors.primary, fontSize: 24, marginLeft: 8 }}>‚Ä∫</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={exportarDados}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: '#3498db',
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>üì¶</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Exportar Meus Dados</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>Fa√ßa backup de seus curr√≠culos e configura√ß√µes</Text>
            </View>
            <Text style={{ color: '#777', fontSize: 12, marginRight: 8 }}>{dataExportFormat}</Text>
            <Text style={{ color: Colors.primary, fontSize: 24 }}>‚Ä∫</Text>
          </TouchableOpacity>

          {/* NOVA FUNCIONALIDADE: Backup Autom√°tico */}
          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={configurarBackupAutomatico}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: '#4CAF50',
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>üîÑ</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Backup Autom√°tico</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>Configure salvamento peri√≥dico dos seus dados</Text>
            </View>
            <View style={{
              backgroundColor: '#FFD700',
              paddingHorizontal: 8,
              paddingVertical: 2,
              borderRadius: 12,
            }}>
              <Text style={{ fontSize: 10, fontWeight: 'bold' }}>EM BREVE</Text>
            </View>
            <Text style={{ color: Colors.primary, fontSize: 24, marginLeft: 8 }}>‚Ä∫</Text>
          </TouchableOpacity>
        </View>

        {/* NOVA SE√á√ÉO: Integra√ß√µes */}
        <View style={{
          backgroundColor: Colors.white,
          borderRadius: 10,
          padding: 20,
          marginBottom: 20,
          ...Platform.select({
            ios: {
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 2 },
              shadowOpacity: 0.1,
              shadowRadius: 4,
            },
            android: {
              elevation: 2,
            },
          }),
        }}>
          <Text style={{
            fontSize: 18,
            fontWeight: 'bold',
            color: Colors.dark,
            marginBottom: 15,
          }}>
            Integra√ß√µes
          </Text>

          {/* Integra√ß√£o com LinkedIn */}
          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={conectarLinkedIn}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: '#0077B5',
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>üîó</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Conectar com LinkedIn</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>Importe dados do seu perfil profissional</Text>
            </View>
            <View style={{
              backgroundColor: '#FFD700',
              paddingHorizontal: 8,
              paddingVertical: 2,
              borderRadius: 12,
            }}>
              <Text style={{ fontSize: 10, fontWeight: 'bold' }}>EM BREVE</Text>
            </View>
            <Text style={{ color: Colors.primary, fontSize: 24, marginLeft: 8 }}>‚Ä∫</Text>
          </TouchableOpacity>

          {/* Sincroniza√ß√£o com nuvem */}
          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={sincronizarNuvem}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: '#03A9F4',
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>‚òÅÔ∏è</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Sincronizar com Nuvem</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>Google Drive, Dropbox ou OneDrive</Text>
            </View>
            <View style={{
              backgroundColor: '#FFD700',
              paddingHorizontal: 8,
              paddingVertical: 2,
              borderRadius: 12,
            }}>
              <Text style={{ fontSize: 10, fontWeight: 'bold' }}>EM BREVE</Text>
            </View>
            <Text style={{ color: Colors.primary, fontSize: 24, marginLeft: 8 }}>‚Ä∫</Text>
          </TouchableOpacity>
        </View>

        {/* Se√ß√£o de Configura√ß√µes Gerais - EXPANDIDA COM NOVAS OP√á√ïES */}
        <View style={{
          backgroundColor: Colors.white,
          borderRadius: 10,
          padding: 20,
          marginBottom: 20,
          ...Platform.select({
            ios: {
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 2 },
              shadowOpacity: 0.1,
              shadowRadius: 4,
            },
            android: {
              elevation: 2,
            },
          }),
        }}>
          <Text style={{
            fontSize: 18,
            fontWeight: 'bold',
            color: Colors.dark,
            marginBottom: 15,
          }}>
            Configura√ß√µes Gerais
          </Text>

          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={() => navigation.navigate('ConfiguracoesIA')}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: Colors.primary,
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>üîë</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Configura√ß√µes de IA</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>Gerenciar chaves de API</Text>
            </View>
            <Text style={{ color: Colors.primary, fontSize: 24 }}>‚Ä∫</Text>
          </TouchableOpacity>

          {/* Tema do aplicativo */}
          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={mudarTema}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: '#9b59b6',
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>üé®</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Tema do Aplicativo</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>
                {darkModeEnabled ? 'Modo escuro ativado' : 'Modo claro ativado'}
              </Text>
            </View>
            <Switch
              value={darkModeEnabled}
              onValueChange={mudarTema}
              trackColor={{ false: Colors.lightGray, true: 'rgba(155, 89, 182, 0.5)' }}
              thumbColor={darkModeEnabled ? '#9b59b6' : '#f4f3f4'}
            />
          </TouchableOpacity>

          {/* NOVA FUNCIONALIDADE: Notifica√ß√µes */}
          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={gerenciarNotificacoes}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: '#F44336',
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>üîî</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Notifica√ß√µes</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>
                {notificationsEnabled ? 'Notifica√ß√µes ativadas' : 'Notifica√ß√µes desativadas'}
              </Text>
            </View>
            <Switch
              value={notificationsEnabled}
              onValueChange={gerenciarNotificacoes}
              trackColor={{ false: Colors.lightGray, true: 'rgba(244, 67, 54, 0.5)' }}
              thumbColor={notificationsEnabled ? '#F44336' : '#f4f3f4'}
            />
          </TouchableOpacity>

          {/* NOVA FUNCIONALIDADE: Idioma */}
          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={alterarIdioma}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: '#2196F3',
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>üåê</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Idioma</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>Portugu√™s</Text>
            </View>
            <View style={{
              backgroundColor: '#FFD700',
              paddingHorizontal: 8,
              paddingVertical: 2,
              borderRadius: 12,
            }}>
              <Text style={{ fontSize: 10, fontWeight: 'bold' }}>EM BREVE</Text>
            </View>
            <Text style={{ color: Colors.primary, fontSize: 24, marginLeft: 8 }}>‚Ä∫</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={limparCache}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: Colors.warning,
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>üóëÔ∏è</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Limpar Cache</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>Remover dados armazenados localmente</Text>
            </View>
            <Text style={{ color: Colors.primary, fontSize: 24 }}>‚Ä∫</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={() => navigation.navigate('SobreApp')}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: Colors.info,
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>‚ÑπÔ∏è</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Sobre o Aplicativo</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>Informa√ß√µes e termos de uso</Text>
            </View>
            <Text style={{ color: Colors.primary, fontSize: 24 }}>‚Ä∫</Text>
          </TouchableOpacity>

          {/* NOVA FUNCIONALIDADE: Verificar Atualiza√ß√µes */}
          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
              borderBottomWidth: 1,
              borderBottomColor: Colors.mediumGray,
            }}
            onPress={verificarAtualizacoes}
            disabled={loading}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: '#009688',
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>‚Üª</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Verificar Atualiza√ß√µes</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>Buscar novas vers√µes do aplicativo</Text>
            </View>
            {loading ? (
              <ActivityIndicator size="small" color={Colors.primary} style={{ marginRight: 10 }} />
            ) : (
              <Text style={{ color: Colors.primary, fontSize: 24 }}>‚Ä∫</Text>
            )}
          </TouchableOpacity>

          <TouchableOpacity
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 12,
            }}
            onPress={confirmLogout}
          >
            <View style={{
              width: 40,
              height: 40,
              borderRadius: 20,
              backgroundColor: Colors.danger,
              justifyContent: 'center',
              alignItems: 'center',
              marginRight: 15,
            }}>
              <Text style={{ color: Colors.white, fontSize: 16 }}>‚§∂</Text>
            </View>
            <View style={{ flex: 1 }}>
              <Text style={{ fontSize: 16, fontWeight: '500' }}>Sair</Text>
              <Text style={{ color: Colors.lightText, fontSize: 14 }}>Encerrar sess√£o</Text>
            </View>
            <Text style={{ color: Colors.primary, fontSize: 24 }}>‚Ä∫</Text>
          </TouchableOpacity>
        </View>

        {/* Vers√£o do aplicativo */}
        <View style={{
          alignItems: 'center',
          justifyContent: 'center',
          paddingVertical: 20,
          marginBottom: 30
        }}>
          <Text style={{
            color: Colors.lightText,
            fontSize: 14
          }}>
            CurriculoBot Premium
          </Text>
          <Text style={{
            color: Colors.lightText,
            fontSize: 12
          }}>
            Vers√£o 1.2.0
          </Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const HomeStack = createStackNavigator();

const buscarVagasComGemini = async (curriculoData, forceRefresh = false) => {
  try {
    // Verificar cache apenas se n√£o estiver for√ßando atualiza√ß√£o
    if (!forceRefresh) {
      const cacheKey = `vagas_${JSON.stringify(curriculoData).slice(0, 50)}`;
      const cachedResult = await AsyncStorage.getItem(cacheKey);

      if (cachedResult) {
        const parsed = JSON.parse(cachedResult);
        const cacheAge = new Date() - new Date(parsed.timestamp);
        const cacheValidHours = 24;

        if (cacheAge < cacheValidHours * 60 * 60 * 1000) {
          console.log(`Usando resultado em cache para busca de vagas`);
          return {
            success: true,
            vagas: parsed.resultado,
            timestamp: parsed.timestamp,
            fromCache: true
          };
        }
      }
    }

    // Se estamos for√ßando refresh ou n√£o tem cache v√°lido, proceder com busca
    console.log('Iniciando busca de vagas com IA', forceRefresh ? '(for√ßando atualiza√ß√£o)' : '');

    // Obter API key do Gemini
    const apiKey = await getIAAPIKey('GEMINI');

    if (!apiKey) {
      throw new Error("API key do Google Gemini n√£o configurada");
    }

    // Formatar dados relevantes do curr√≠culo para o prompt
    const cv = curriculoData.data;

    // Extrair informa√ß√µes chave do curr√≠culo
    const area = cv.informacoes_pessoais?.area || '';
    const nome = `${cv.informacoes_pessoais?.nome || ''} ${cv.informacoes_pessoais?.sobrenome || ''}`.trim();

    // Extrair compet√™ncias e palavras-chave do curr√≠culo
    const habilidades = new Set();

    // De projetos
    if (cv.projetos && cv.projetos.length > 0) {
      cv.projetos.forEach(projeto => {
        if (projeto.habilidades) {
          projeto.habilidades.split(',').forEach(hab => {
            habilidades.add(hab.trim());
          });
        }
      });
    }

    // De experi√™ncias
    const experiencias = [];
    if (cv.experiencias && cv.experiencias.length > 0) {
      cv.experiencias.forEach(exp => {
        experiencias.push({
          cargo: exp.cargo,
          empresa: exp.empresa,
          descricao: exp.descricao
        });

        // Extrair palavras-chave das descri√ß√µes de experi√™ncia
        if (exp.descricao) {
          const palavrasChave = exp.descricao
            .split(/[\s,;.]+/)
            .filter(palavra =>
              palavra.length > 4 &&
              !['sobre', 'como', 'para', 'onde', 'quando', 'quem', 'porque', 'ent√£o'].includes(palavra.toLowerCase())
            );

          palavrasChave.forEach(palavra => habilidades.add(palavra));
        }
      });
    }

    // De forma√ß√£o
    const formacoes = [];
    if (cv.formacoes_academicas && cv.formacoes_academicas.length > 0) {
      cv.formacoes_academicas.forEach(formacao => {
        formacoes.push({
          diploma: formacao.diploma,
          area: formacao.area_estudo,
          instituicao: formacao.instituicao
        });

        // Adicionar √°rea de estudo √†s habilidades
        if (formacao.area_estudo) {
          habilidades.add(formacao.area_estudo);
        }
      });
    }

    // De idiomas
    const idiomas = [];
    if (cv.idiomas && cv.idiomas.length > 0) {
      cv.idiomas.forEach(idioma => {
        idiomas.push({
          idioma: idioma.nome,
          nivel: idioma.nivel
        });
      });
    }

    // Adicionar timestamp para diversificar as respostas quando for√ßar atualiza√ß√£o
    const timestamp = new Date().toISOString();

    // Prompt melhorado para garantir informa√ß√µes completas e links funcionais
    const promptText = `
Voc√™ √© um recrutador e especialista em RH com 15 anos de experi√™ncia no mercado brasileiro.

TAREFA: Analisar o perfil profissional abaixo e recomendar 5 vagas reais que est√£o abertas atualmente no mercado de trabalho brasileiro. Essas vagas devem ser adequadas para o perfil do candidato com base em suas habilidades, experi√™ncia e forma√ß√£o.

PERFIL DO CANDIDATO:
Nome: ${nome}
√Årea de atua√ß√£o: ${area}
${experiencias.length > 0 ? `
Experi√™ncias profissionais:
${experiencias.map(exp => `- ${exp.cargo} na empresa ${exp.empresa}`).join('\n')}
` : ''}

${formacoes.length > 0 ? `
Forma√ß√£o acad√™mica:
${formacoes.map(form => `- ${form.diploma} em ${form.area} - ${form.instituicao}`).join('\n')}
` : ''}

${idiomas.length > 0 ? `
Idiomas:
${idiomas.map(idioma => `- ${idioma.idioma}: ${idioma.nivel}`).join('\n')}
` : ''}

Principais compet√™ncias e palavras-chave:
${Array.from(habilidades).slice(0, 15).join(', ')}

INSTRU√á√ïES ESPEC√çFICAS:
1. Encontre 5 vagas reais que existem atualmente no mercado brasileiro (2025)
2. As vagas devem ser compat√≠veis com o perfil, experi√™ncia e senioridade do candidato
3. Cada vez que esta consulta for executada, encontre vagas DIFERENTES das anteriores (atual: ${timestamp})

4. Para cada vaga, forne√ßa OBRIGATORIAMENTE todas estas informa√ß√µes:
   - T√≠tulo da vaga (cargo espec√≠fico)
   - Nome da empresa
   - Localiza√ß√£o (cidade/estado ou remoto)
   - Faixa salarial estimada (baseada em sua expertise de mercado)
   - 5 principais requisitos/qualifica√ß√µes exigidos
   - 3 diferenciais da vaga
   - Link completo e clic√°vel para a vaga (URL completa para LinkedIn, Glassdoor, Indeed, etc.)
   - Breve descri√ß√£o das responsabilidades (2-3 frases)
   - Avalia√ß√£o de compatibilidade com o perfil (porcentagem de 0-100% e justificativa)

5. IMPORTANTE SOBRE OS LINKS: Forne√ßa URLs completos e funcionais no formato [texto](url) 
   - Use o formato markdown para links, garantindo que sejam clic√°veis
   - Os links devem apontar para plataformas reais como LinkedIn, Glassdoor, Indeed, Catho, etc.
   - Cada vaga DEVE ter pelo menos um link funcional

6. As vagas devem variar em termos de empresas e possibilidades, mostrando diferentes op√ß√µes no mercado
7. Priorize vagas publicadas nos √∫ltimos 30 dias
8. Formate a resposta de forma estruturada usando markdown para facilitar a leitura
9. Inclua uma an√°lise final com recomenda√ß√µes sobre como o candidato pode se destacar ao aplicar para estas vagas

FORMATO DE RESPOSTA:
# Vagas Recomendadas para ${nome}

## Vaga 1: [T√≠tulo da Vaga] - [Empresa]
**Localiza√ß√£o:** [Cidade/Estado ou Remoto]  
**Faixa Salarial:** R$ [valor] - R$ [valor]  

### Descri√ß√£o:
[2-3 frases sobre as responsabilidades]

### Requisitos:
- [Requisito 1]
- [Requisito 2]
- [Requisito 3]
- [Requisito 4]
- [Requisito 5]

### Diferenciais:
- [Diferencial 1]
- [Diferencial 2]
- [Diferencial 3]

### Link da Vaga:
[Nome da Plataforma](URL completa da vaga)

### Compatibilidade:
**[XX]%** - [Justificativa breve]

[Repetir o formato acima para as 5 vagas]

## Recomenda√ß√µes para se destacar
[3-5 dicas personalizadas]

IMPORTANTE: Todas as vagas informadas devem ser REAIS e ATUAIS (2025), baseando-se em sua base de conhecimento sobre o mercado de trabalho brasileiro atual. N√£o crie vagas fict√≠cias e SEMPRE forne√ßa TODAS as informa√ß√µes solicitadas, sem omitir nenhum campo.
`;

    console.log('Enviando prompt para busca de vagas:', promptText);

    // Preparar a requisi√ß√£o para o Gemini
    const endpoint = `${IA_APIS.GEMINI.endpoint}?key=${apiKey}`;
    const requestBody = {
      contents: [{ parts: [{ text: promptText }] }],
      generationConfig: {
        temperature: forceRefresh ? 0.4 : 0.2,  // Temperatura ligeiramente mais alta para refresh
        maxOutputTokens: 4000,  // Garantir conte√∫do completo
        topP: 0.8,
        topK: 40
      }
    };

    // Fazer a chamada para o Gemini
    const response = await axios.post(endpoint, requestBody, {
      headers: { 'Content-Type': 'application/json' },
      timeout: 30000  // 30 segundos
    });

    // Processar a resposta
    if (response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
      const resultado = response.data.candidates[0].content.parts[0].text;

      // Armazenar no cache
      try {
        const cacheKey = `vagas_${JSON.stringify(curriculoData).slice(0, 50)}`;
        await AsyncStorage.setItem(cacheKey, JSON.stringify({
          resultado: resultado,
          timestamp: new Date().toISOString()
        }));
      } catch (cacheError) {
        console.log('Erro ao salvar busca de vagas no cache:', cacheError.message);
      }

      return {
        success: true,
        vagas: resultado,
        timestamp: new Date().toISOString(),
        fromCache: false
      };
    } else {
      throw new Error('Formato de resposta inesperado do Gemini');
    }
  } catch (error) {
    console.error('Erro ao buscar vagas:', error);
    return {
      success: false,
      error: error.message || 'Erro ao buscar vagas com IA'
    };
  }
};

const BuscaVagasScreen = ({ route, navigation }) => {
  const { curriculoData } = route.params;
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [vagasResultado, setVagasResultado] = useState(null);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [fromCache, setFromCache] = useState(false);
  const [lastUpdate, setLastUpdate] = useState(null);

  useEffect(() => {
    // Simular progresso durante a busca para feedback visual
    const progressInterval = setInterval(() => {
      setLoadingProgress(prev => {
        const newProgress = prev + (0.1 * Math.random());
        return newProgress > 0.9 ? 0.9 : newProgress;
      });
    }, 800);

    // Iniciar a busca de vagas
    buscarVagas();

    return () => clearInterval(progressInterval);
  }, []);

  const buscarVagas = async (forceRefresh = false) => {
    try {
      setLoading(true);
      setError(null);
      setLoadingProgress(0.1);

      if (forceRefresh) {
        // Mostrar tooltip/mensagem quando for√ßar a atualiza√ß√£o
        Alert.alert(
          'Buscando Novas Vagas',
          'Estamos buscando novas vagas compat√≠veis com seu perfil. Isso pode levar alguns instantes...'
        );
      }

      // Chamar a fun√ß√£o de busca com o par√¢metro de for√ßar atualiza√ß√£o
      const resultado = await buscarVagasComGemini(curriculoData, forceRefresh);

      if (resultado.success) {
        setVagasResultado(resultado.vagas);
        setFromCache(resultado.fromCache || false);
        setLastUpdate(resultado.timestamp || new Date().toISOString());
      } else {
        setError(resultado.error);
      }
    } catch (error) {
      console.error('Erro na busca de vagas:', error);
      setError('N√£o foi poss√≠vel completar a busca de vagas. Tente novamente mais tarde.');
    } finally {
      setLoading(false);
      setLoadingProgress(1);
    }
  };

  const handleRefresh = () => {
    // For√ßar atualiza√ß√£o (ignorar cache)
    buscarVagas(true);
  };

  const handleTryAgain = () => {
    setLoading(true);
    setError(null);
    setLoadingProgress(0.1);
    buscarVagas();
  };

  const handleShare = async () => {
    try {
      await Share.share({
        message: vagasResultado,
        title: 'Vagas recomendadas para seu perfil'
      });
    } catch (error) {
      console.error('Erro ao compartilhar:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel compartilhar as vagas.');
    }
  };

  // Fun√ß√µes de processamento de links (manter de antes)
  const processarConteudo = (texto) => {
    if (!texto) return { conteudoProcessado: '', links: [] };

    // Extrair links do formato markdown [texto](url)
    const regex = /\[([^\]]+)\]\(([^)]+)\)/g;
    let match;
    const links = [];

    while ((match = regex.exec(texto)) !== null) {
      links.push({
        texto: match[1],
        url: match[2],
        completo: match[0]
      });
    }

    return {
      conteudoProcessado: texto,
      links
    };
  };

  // Componente VagaLink (manter de antes)
  const VagaLink = ({ url, label }) => {
    const handlePress = async () => {
      // Verificar se a URL √© v√°lida
      if (!url.startsWith('http')) {
        url = 'https://' + url;
      }

      try {
        const supported = await Linking.canOpenURL(url);

        if (supported) {
          await Linking.openURL(url);
        } else {
          Alert.alert('Erro', `N√£o foi poss√≠vel abrir o link: ${url}`);
        }
      } catch (error) {
        console.error('Erro ao abrir link:', error);
        Alert.alert('Erro', 'N√£o foi poss√≠vel abrir este link.');
      }
    };

    return (
      <TouchableOpacity
        onPress={handlePress}
        style={{
          backgroundColor: Colors.primary,
          paddingVertical: 8,
          paddingHorizontal: 12,
          borderRadius: 5,
          alignSelf: 'flex-start',
          margin: 5,
        }}
      >
        <Text style={{ color: Colors.white, fontWeight: '500' }}>
          {label || 'Acessar Vaga'}
        </Text>
      </TouchableOpacity>
    );
  };

  // Manter de antes
  const renderizarLinksVagas = () => {
    const { conteudoProcessado, links } = processarConteudo(vagasResultado);

    // Agrupar links por vaga (baseado na ocorr√™ncia de "Vaga X" no texto)
    const secoes = conteudoProcessado.split(/## Vaga \d+:/);

    if (secoes.length <= 1) return null;

    return (
      <View style={{
        backgroundColor: '#e8f5e9',
        padding: 15,
        borderRadius: 10,
        marginBottom: 15,
      }}>
        <Text style={{
          fontSize: 16,
          fontWeight: 'bold',
          marginBottom: 10,
          color: Colors.dark,
        }}>
          Links Diretos para as Vagas:
        </Text>

        {secoes.map((secao, index) => {
          if (index === 0) return null; // Pular a introdu√ß√£o

          // Extrair o t√≠tulo da vaga
          const tituloMatch = secao.match(/\[([^\]]+)\]\s*-\s*\[([^\]]+)\]/);
          const titulo = tituloMatch
            ? `${tituloMatch[1]} - ${tituloMatch[2]}`
            : `Vaga ${index}`;

          // Encontrar links nesta se√ß√£o
          const linksVaga = links.filter(link =>
            secao.includes(link.completo) &&
            (link.texto.includes('Link') ||
              link.texto.includes('vaga') ||
              link.texto.includes('Aplicar'))
          );

          if (linksVaga.length === 0) return null;

          return (
            <View key={index} style={{
              marginBottom: 10,
              padding: 10,
              backgroundColor: Colors.white,
              borderRadius: 5,
              borderLeftWidth: 3,
              borderLeftColor: Colors.success,
            }}>
              <Text style={{ fontWeight: 'bold', marginBottom: 5 }}>
                {titulo}
              </Text>

              <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>
                {linksVaga.map((link, linkIndex) => (
                  <VagaLink
                    key={linkIndex}
                    url={link.url}
                    label={link.texto}
                  />
                ))}
              </View>
            </View>
          );
        })}
      </View>
    );
  };

  // Para processar os resultados
  const { conteudoProcessado, links } = vagasResultado ? processarConteudo(vagasResultado) : { conteudoProcessado: '', links: [] };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.dark} />

      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.backButtonText}>‚Äπ</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Vagas para Voc√™</Text>

        {/* Novo bot√£o de atualiza√ß√£o */}
        {!loading && !error && (
          <TouchableOpacity
            style={{
              backgroundColor: 'rgba(255, 255, 255, 0.2)',
              paddingVertical: 5,
              paddingHorizontal: 10,
              borderRadius: 5,
            }}
            onPress={handleRefresh}
          >
            <Text style={{ color: Colors.white, fontSize: 12 }}>Atualizar</Text>
          </TouchableOpacity>
        )}
      </View>

      {loading ? (
        <View style={styles.loadingContainer}>
          <Text style={{
            fontSize: 18,
            fontWeight: 'bold',
            color: Colors.dark,
            marginBottom: 20,
            textAlign: 'center'
          }}>
            Buscando vagas personalizadas
          </Text>

          <View style={{
            width: '80%',
            height: 10,
            backgroundColor: Colors.lightGray,
            borderRadius: 5,
            marginBottom: 20
          }}>
            <View style={{
              width: `${loadingProgress * 100}%`,
              height: '100%',
              backgroundColor: Colors.primary,
              borderRadius: 5
            }} />
          </View>

          <View style={{
            backgroundColor: 'rgba(0, 188, 212, 0.1)',
            padding: 15,
            borderRadius: 8,
            marginTop: 20,
            maxWidth: '90%'
          }}>
            <Text style={{ textAlign: 'center', color: Colors.dark }}>
              Nossa IA est√° analisando seu perfil e buscando vagas que correspondam √†s suas qualifica√ß√µes e objetivos de carreira.
            </Text>
          </View>
        </View>
      ) : error ? (
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>{error}</Text>
          <TouchableOpacity
            style={styles.retryButton}
            onPress={handleTryAgain}
          >
            <Text style={styles.retryButtonText}>Tentar Novamente</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <View style={{ flex: 1 }}>
          <ScrollView style={{ padding: 15 }}>
            {/* T√≠tulo e informa√ß√µes */}
            <View style={{
              backgroundColor: Colors.white,
              borderRadius: 10,
              padding: 15,
              marginBottom: 15,
              ...Platform.select({
                ios: {
                  shadowColor: '#000',
                  shadowOffset: { width: 0, height: 2 },
                  shadowOpacity: 0.1,
                  shadowRadius: 4,
                },
                android: {
                  elevation: 2,
                },
              }),
            }}>
              <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
                <Text style={{
                  fontSize: 18,
                  fontWeight: 'bold',
                  color: Colors.dark,
                }}>
                  Vagas Personalizadas para Seu Perfil
                </Text>

                {/* Bot√£o de refresh alternativo */}
                <TouchableOpacity
                  style={{
                    backgroundColor: Colors.primary,
                    padding: 8,
                    borderRadius: 20,
                    width: 36,
                    height: 36,
                    justifyContent: 'center',
                    alignItems: 'center',
                  }}
                  onPress={handleRefresh}
                >
                  <Text style={{ color: Colors.white, fontSize: 16 }}>‚Üª</Text>
                </TouchableOpacity>
              </View>

              <Text style={{
                fontSize: 14,
                color: Colors.lightText,
                marginBottom: 6,
              }}>
                Com base nas informa√ß√µes do seu curr√≠culo, encontramos estas vagas que correspondem ao seu perfil profissional.
              </Text>

              {fromCache && (
                <View style={{
                  backgroundColor: '#e3f2fd',
                  padding: 8,
                  borderRadius: 4,
                  marginTop: 5,
                  flexDirection: 'row',
                  alignItems: 'center',
                  justifyContent: 'space-between'
                }}>
                  <Text style={{
                    fontSize: 12,
                    color: '#0d47a1',
                    flex: 1,
                  }}>
                    √öltima atualiza√ß√£o: {new Date(lastUpdate).toLocaleDateString()} √†s {new Date(lastUpdate).toLocaleTimeString()}
                  </Text>

                  <TouchableOpacity
                    style={{
                      backgroundColor: '#1976d2',
                      paddingVertical: 4,
                      paddingHorizontal: 8,
                      borderRadius: 4,
                      marginLeft: 10,
                    }}
                    onPress={handleRefresh}
                  >
                    <Text style={{ color: Colors.white, fontSize: 12 }}>Buscar Novas</Text>
                  </TouchableOpacity>
                </View>
              )}
            </View>

            {/* Renderizar links para vagas */}
            {renderizarLinksVagas()}

            {/* Resultados da IA */}
            <View style={{
              backgroundColor: Colors.white,
              borderRadius: 10,
              padding: 15,
              marginBottom: 15,
              ...Platform.select({
                ios: {
                  shadowColor: '#000',
                  shadowOffset: { width: 0, height: 2 },
                  shadowOpacity: 0.1,
                  shadowRadius: 4,
                },
                android: {
                  elevation: 2,
                },
              }),
            }}>
              <Markdown
                style={{
                  body: { fontSize: 16, lineHeight: 24, color: Colors.dark },
                  heading1: {
                    fontSize: 22,
                    fontWeight: 'bold',
                    marginBottom: 10,
                    color: Colors.dark,
                    borderBottomWidth: 1,
                    borderBottomColor: Colors.mediumGray,
                    paddingBottom: 5,
                  },
                  heading2: {
                    fontSize: 20,
                    fontWeight: 'bold',
                    marginBottom: 10,
                    marginTop: 15,
                    color: Colors.dark
                  },
                  heading3: {
                    fontSize: 18,
                    fontWeight: 'bold',
                    marginTop: 10,
                    marginBottom: 5,
                    color: Colors.dark
                  },
                  paragraph: {
                    fontSize: 16,
                    lineHeight: 24,
                    marginBottom: 10,
                    color: Colors.dark
                  },
                  list_item: {
                    marginBottom: 5,
                    flexDirection: 'row',
                    alignItems: 'flex-start',
                  },
                  bullet_list: {
                    marginVertical: 10,
                  },
                  strong: {
                    fontWeight: 'bold',
                  },
                  em: {
                    fontStyle: 'italic',
                  },
                  link: {
                    color: Colors.primary,
                    textDecorationLine: 'underline',
                  },
                }}
                onLinkPress={(url) => {
                  Linking.openURL(url).catch(err => {
                    console.error('Erro ao abrir link:', err);
                    Alert.alert('Erro', 'N√£o foi poss√≠vel abrir este link.');
                  });
                }}
              >
                {conteudoProcessado}
              </Markdown>
            </View>
          </ScrollView>

          {/* Bot√£o para compartilhar */}
          <View style={{
            padding: 15,
            backgroundColor: Colors.white,
            borderTopWidth: 1,
            borderTopColor: Colors.mediumGray,
            flexDirection: 'row',
            justifyContent: 'space-between',
          }}>
            {/* Bot√£o de atualiza√ß√£o grande para facilitar o acesso */}
            <TouchableOpacity
              style={{
                backgroundColor: Colors.secondary,
                paddingVertical: 12,
                paddingHorizontal: 15,
                borderRadius: 8,
                alignItems: 'center',
                flex: 1,
                marginRight: 8,
              }}
              onPress={handleRefresh}
            >
              <Text style={{
                color: Colors.white,
                fontWeight: 'bold',
                fontSize: 16,
              }}>
                Buscar Novas Vagas
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={{
                backgroundColor: Colors.primary,
                paddingVertical: 12,
                paddingHorizontal: 15,
                borderRadius: 8,
                alignItems: 'center',
                flex: 1,
                marginLeft: 8,
              }}
              onPress={handleShare}
            >
              <Text style={{
                color: Colors.white,
                fontWeight: 'bold',
                fontSize: 16,
              }}>
                Compartilhar
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      )}
    </SafeAreaView>
  );
};

const AuthContext = createContext();

const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Verificar se h√° usu√°rio logado
    const checkUser = async () => {
      try {
        const userData = await AsyncStorage.getItem('currentUser');
        if (userData) {
          setUser(JSON.parse(userData));
        }
      } catch (error) {
        console.error('Erro ao verificar usu√°rio:', error);
      } finally {
        setLoading(false);
      }
    };

    checkUser();
  }, []);

  const login = async (email, password) => {
    try {
      // Buscar usu√°rios
      const usuarios = await AsyncStorage.getItem('usuarios');
      const usuariosArray = usuarios ? JSON.parse(usuarios) : [];

      // Verificar credenciais
      const usuarioEncontrado = usuariosArray.find(
        u => u.email === email && u.password === password
      );

      if (usuarioEncontrado) {
        setUser(usuarioEncontrado);
        await AsyncStorage.setItem('currentUser', JSON.stringify(usuarioEncontrado));
        return { success: true };
      } else {
        return { success: false, message: 'Email ou senha incorretos' };
      }
    } catch (error) {
      console.error('Erro ao fazer login:', error);
      return { success: false, message: 'Erro ao fazer login' };
    }
  };

  const register = async (nome, email, password) => {
    try {
      // Verificar se o email j√° est√° em uso
      const usuarios = await AsyncStorage.getItem('usuarios');
      const usuariosArray = usuarios ? JSON.parse(usuarios) : [];

      if (usuariosArray.some(u => u.email === email)) {
        return { success: false, message: 'Email j√° cadastrado' };
      }

      // Criar novo usu√°rio
      const novoUsuario = {
        id: Date.now().toString(),
        nome,
        email,
        password,
        dataCadastro: new Date().toISOString()
      };

      // Salvar usu√°rio
      const novosUsuarios = [...usuariosArray, novoUsuario];
      await AsyncStorage.setItem('usuarios', JSON.stringify(novosUsuarios));

      // Fazer login autom√°tico
      setUser(novoUsuario);
      await AsyncStorage.setItem('currentUser', JSON.stringify(novoUsuario));

      return { success: true };
    } catch (error) {
      console.error('Erro ao cadastrar:', error);
      return { success: false, message: 'Erro ao cadastrar' };
    }
  };

  // Fun√ß√£o de logout corrigida
  const logout = async () => {
    try {
      // Primeiro, definimos o estado para null para evitar acesso a dados antigos
      setUser(null);

      // Depois removemos os dados de usu√°rio do AsyncStorage
      await AsyncStorage.removeItem('currentUser');

      // Talvez seja necess√°rio limpar outras informa√ß√µes tamb√©m
      // Por exemplo, limpar cache de an√°lises, etc.

      console.log('Logout realizado com sucesso');
      return true;
    } catch (error) {
      console.error('Erro ao fazer logout:', error);
      // Mesmo com erro, definir o usu√°rio como null para evitar problemas
      setUser(null);
      return false;
    }
  };

  // Fun√ß√£o para atualizar o user (opcional, se voc√™ tiver)
  const updateUser = (userData) => {
    try {
      setUser(userData);
    } catch (error) {
      console.error('Erro ao atualizar dados do usu√°rio:', error);
    }
  };

  return (
    <AuthContext.Provider value={{ user, loading, login, register, logout, updateUser }}>
      {children}
    </AuthContext.Provider>
  );
};

const useAuth = () => useContext(AuthContext);

const chamarIAAPI = async (tipoIA, apiKey, promptText) => {
  const MAX_RETRIES = 2;

  // Implementa√ß√£o de backoff exponencial para retries
  const tentarComRetry = async (funcaoRequest) => {
    for (let tentativa = 0; tentativa <= MAX_RETRIES; tentativa++) {
      try {
        if (tentativa > 0) {
          const tempoEspera = Math.pow(2, tentativa) * 1000;
          console.log(`chamarIAAPI: Aguardando ${tempoEspera}ms antes da tentativa ${tentativa + 1}`);
          await new Promise(resolve => setTimeout(resolve, tempoEspera));
        }

        return await funcaoRequest();
      } catch (error) {
        console.log(`chamarIAAPI: Erro na tentativa ${tentativa + 1}:`, error.message);

        // Se √© a √∫ltima tentativa, propagar o erro
        if (tentativa === MAX_RETRIES) throw error;

        // Se n√£o √© erro de rate limit (429), n√£o tente novamente
        if (error.response?.status !== 429) throw error;
      }
    }
  };

  // Handlers espec√≠ficos para cada IA
  switch (tipoIA) {
    case 'GEMINI':
      return await tentarComRetry(async () => {
        const endpoint = `${IA_APIS.GEMINI.endpoint}?key=${apiKey}`;
        const requestBody = {
          contents: [{ parts: [{ text: promptText }] }],
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 800,
          }
        };

        const response = await axios.post(endpoint, requestBody, {
          headers: { 'Content-Type': 'application/json' },
          timeout: 15000
        });

        if (response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
          return response.data.candidates[0].content.parts[0].text;
        } else {
          throw new Error('Formato de resposta inesperado do Gemini');
        }
      });

    case 'OPENAI':
      return await tentarComRetry(async () => {
        const endpoint = IA_APIS.OPENAI.endpoint;
        const requestBody = {
          model: "gpt-3.5-turbo",
          messages: [
            { role: "system", content: "Voc√™ √© um consultor especializado em an√°lise de curr√≠culos." },
            { role: "user", content: promptText }
          ],
          temperature: 0.7,
          max_tokens: 800
        };

        const response = await axios.post(endpoint, requestBody, {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
          },
          timeout: 15000
        });

        if (response.data?.choices?.[0]?.message?.content) {
          return response.data.choices[0].message.content;
        } else {
          throw new Error('Formato de resposta inesperado do ChatGPT');
        }
      });

    case 'CLAUDE':
      return await tentarComRetry(async () => {
        const endpoint = IA_APIS.CLAUDE.endpoint;
        const requestBody = {
          model: "claude-3-sonnet-20240229",
          max_tokens: 800,
          messages: [
            { role: "user", content: promptText }
          ]
        };

        const response = await axios.post(endpoint, requestBody, {
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'anthropic-version': '2023-06-01'
          },
          timeout: 20000
        });

        if (response.data?.content?.[0]?.text) {
          return response.data.content[0].text;
        } else {
          throw new Error('Formato de resposta inesperado do Claude');
        }
      });

    case 'PERPLEXITY':
      return await tentarComRetry(async () => {
        const endpoint = IA_APIS.PERPLEXITY.endpoint;
        const requestBody = {
          model: "llama-3-8b-instruct",
          messages: [
            { role: "user", content: promptText }
          ],
          temperature: 0.7,
          max_tokens: 800
        };

        const response = await axios.post(endpoint, requestBody, {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
          },
          timeout: 20000
        });

        if (response.data?.choices?.[0]?.message?.content) {
          return response.data.choices[0].message.content;
        } else {
          throw new Error('Formato de resposta inesperado do Perplexity');
        }
      });

    case 'DEEPSEEK':
      return await tentarComRetry(async () => {
        const endpoint = IA_APIS.DEEPSEEK.endpoint;
        const requestBody = {
          model: "deepseek-chat",
          messages: [
            { role: "user", content: promptText }
          ],
          temperature: 0.7,
          max_tokens: 800
        };

        const response = await axios.post(endpoint, requestBody, {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
          },
          timeout: 20000
        });

        if (response.data?.choices?.[0]?.message?.content) {
          return response.data.choices[0].message.content;
        } else {
          throw new Error('Formato de resposta inesperado do DeepSeek');
        }
      });

    case 'BLACKBOX':
      return await tentarComRetry(async () => {
        const endpoint = IA_APIS.BLACKBOX.endpoint;
        const requestBody = {
          messages: [
            { role: "user", content: promptText }
          ],
          temperature: 0.7,
          max_tokens: 800
        };

        const response = await axios.post(endpoint, requestBody, {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
          },
          timeout: 20000
        });

        if (response.data?.message?.content) {
          return response.data.message.content;
        } else {
          throw new Error('Formato de resposta inesperado do Blackbox');
        }
      });

    case 'BING':
      return await tentarComRetry(async () => {
        const endpoint = IA_APIS.BING.endpoint;
        const params = {
          q: promptText,
          count: 5,
          responseFilter: 'Computation,Entities,Places,Webpages'
        };

        const response = await axios.get(endpoint, {
          headers: {
            'Ocp-Apim-Subscription-Key': apiKey
          },
          params: params,
          timeout: 15000
        });

        if (response.data?.webPages?.value) {
          // Construa um texto resumindo os resultados
          let resultado = "An√°lise baseada em resultados da busca Bing:\n\n";
          response.data.webPages.value.forEach((item, index) => {
            resultado += `${index + 1}. ${item.name}\n${item.snippet}\n\n`;
          });

          return resultado;
        } else {
          throw new Error('Formato de resposta inesperado do Bing');
        }
      });

    case 'GROK':
      return await tentarComRetry(async () => {
        const endpoint = IA_APIS.GROK.endpoint;
        const requestBody = {
          messages: [
            { role: "user", content: promptText }
          ],
          temperature: 0.7,
          max_tokens: 800
        };

        const response = await axios.post(endpoint, requestBody, {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
          },
          timeout: 20000
        });

        if (response.data?.choices?.[0]?.message?.content) {
          return response.data.choices[0].message.content;
        } else {
          throw new Error('Formato de resposta inesperado do Grok');
        }
      });

    default:
      throw new Error(`IA n√£o implementada: ${tipoIA}`);
  }
};
const analisarCurriculoComIA = async (curriculoData, tipoAnalise, tipoIA = 'GEMINI', forceOffline = false) => {
  // Valida√ß√£o de entrada
  if (!curriculoData) {
    console.error('analisarCurriculoComIA: Dados do curr√≠culo n√£o fornecidos');
    return {
      success: false,
      analise: 'N√£o foi poss√≠vel analisar o curr√≠culo: dados ausentes.',
      offline: true
    };
  }

  if (!tipoAnalise) {
    tipoAnalise = 'geral'; // Valor padr√£o
  }

  // Verificar se a IA selecionada existe
  if (!IA_APIS[tipoIA]) {
    console.error(`analisarCurriculoComIA: Tipo de IA inv√°lido: ${tipoIA}`);
    tipoIA = 'GEMINI'; // Fallback para Gemini
  }

  // Se a IA selecionada √© offline ou forceOffline, usar an√°lise local
  if (forceOffline || IA_APIS[tipoIA].offline) {
    console.log('analisarCurriculoComIA: Usando modo offline');
    return gerarAnaliseLocal(curriculoData, tipoAnalise);
  }

  // Verificar cache usando a combina√ß√£o de tipoAnalise e tipoIA como chave
  const cacheKey = `analise_${tipoIA}_${tipoAnalise}_${JSON.stringify(curriculoData).slice(0, 50)}`;
  try {
    const cachedResult = await AsyncStorage.getItem(cacheKey);
    if (cachedResult) {
      const parsed = JSON.parse(cachedResult);
      const cacheAge = new Date() - new Date(parsed.timestamp);
      const cacheValidHours = 24;

      if (cacheAge < cacheValidHours * 60 * 60 * 1000) {
        console.log(`analisarCurriculoComIA: Usando resultado em cache para ${IA_APIS[tipoIA].nome}`);
        return {
          success: true,
          analise: parsed.resultado,
          offline: false,
          fromCache: true,
          provider: IA_APIS[tipoIA].nome
        };
      }
    }
  } catch (cacheError) {
    console.log('Erro ao verificar cache:', cacheError.message);
  }

  // Fun√ß√£o para formatar curr√≠culo - definida explicitamente dentro do escopo
  const formatarCurriculo = (data) => {
    let texto = '';

    // Helper para adicionar se√ß√£o apenas se existir dados
    const adicionarSecao = (titulo, items, formatoItem) => {
      if (!items || items.length === 0) return;

      texto += `${titulo.toUpperCase()}:\n`;
      items.forEach(item => {
        texto += formatoItem(item);
        texto += '\n';
      });
      texto += '\n';
    };

    // Informa√ß√µes Pessoais
    const pessoal = data.informacoes_pessoais || {};
    const nomeCompleto = `${pessoal.nome || ''} ${pessoal.sobrenome || ''}`.trim();
    if (nomeCompleto) texto += `Nome: ${nomeCompleto}\n`;
    if (pessoal.email) texto += `Email: ${pessoal.email}\n`;
    if (pessoal.endereco) texto += `Endere√ßo: ${pessoal.endereco}\n`;
    if (pessoal.area) texto += `√Årea: ${pessoal.area}\n`;
    if (pessoal.linkedin) texto += `LinkedIn: ${pessoal.linkedin}\n`;
    if (pessoal.github) texto += `GitHub: ${pessoal.github}\n`;
    if (pessoal.site) texto += `Site: ${pessoal.site}\n`;
    texto += '\n';

    // Resumo Profissional
    if (data.resumo_profissional) {
      texto += `RESUMO PROFISSIONAL:\n${data.resumo_profissional}\n\n`;
    }

    // Forma√ß√£o Acad√™mica
    adicionarSecao('Forma√ß√£o Acad√™mica', data.formacoes_academicas, (f) => {
      let item = `- ${f.diploma || ''} em ${f.area_estudo || ''}\n`;
      item += `  ${f.instituicao || ''}\n`;
      item += `  ${f.data_inicio || ''} - ${f.data_fim || ''}\n`;
      if (f.descricao) item += `  Descri√ß√£o: ${f.descricao}\n`;
      if (f.competencias) item += `  Compet√™ncias: ${f.competencias}\n`;
      return item;
    });

    // Experi√™ncia Profissional
    adicionarSecao('Experi√™ncia Profissional', data.experiencias, (e) => {
      let item = `- ${e.cargo || ''}\n`;
      item += `  ${e.empresa || ''}\n`;
      item += `  ${e.data_inicio || ''} - ${e.data_fim || ''}\n`;
      if (e.descricao) item += `  Descri√ß√£o: ${e.descricao}\n`;
      return item;
    });

    // Cursos
    adicionarSecao('Cursos e Certificados', data.cursos, (c) => {
      let item = `- ${c.nome || ''}\n`;
      item += `  ${c.instituicao || ''}\n`;
      if (c.data_inicio || c.data_fim) {
        item += `  ${c.data_inicio || ''} - ${c.data_fim || ''}\n`;
      }
      if (c.descricao) item += `  Descri√ß√£o: ${c.descricao}\n`;
      return item;
    });

    // Projetos
    adicionarSecao('Projetos', data.projetos, (p) => {
      let item = `- ${p.nome || ''}\n`;
      if (p.habilidades) item += `  Habilidades: ${p.habilidades}\n`;
      if (p.descricao) item += `  Descri√ß√£o: ${p.descricao}\n`;
      return item;
    });

    // Idiomas
    adicionarSecao('Idiomas', data.idiomas, (i) => {
      return `- ${i.nome || ''}: ${i.nivel || ''}\n`;
    });

    return texto;
  };

  // Estruturar o curr√≠culo em texto para an√°lise
  const curriculoTexto = formatarCurriculo(curriculoData);

  // Fun√ß√£o para gerar o prompt adequado
  const gerarPrompt = (tipo, textoCurriculo) => {
    const prompts = {
      pontuacao: `Voc√™ √© um consultor de RH. Avalie este curr√≠culo (0-10) em: Conte√∫do (30%), Estrutura (20%), Apresenta√ß√£o (20%), Impacto (30%). Considere especialmente o resumo profissional, experi√™ncias e forma√ß√£o. Forne√ßa nota geral ponderada e justifique brevemente.`,

      melhorias: `Voc√™ √© um consultor de RH. Identifique 3 melhorias espec√≠ficas para este curr√≠culo aumentar chances de entrevistas. Analise especialmente o resumo profissional e as compet√™ncias demonstradas. Para cada melhoria, explique por qu√™ e como implementar.`,

      dicas: `Voc√™ √© um coach de carreira. Com base no resumo profissional e perfil completo deste candidato, forne√ßa 3 dicas de carreira personalizadas. Seja espec√≠fico e pr√°tico, considerando os objetivos mencionados no resumo.`,

      cursos: `Com base no resumo profissional e perfil geral deste candidato, sugira 3 cursos ou certifica√ß√µes espec√≠ficas para complementar suas habilidades e aumentar empregabilidade. Explique onde encontrar e como agregaria valor.`,

      vagas: `Ap√≥s analisar o resumo profissional e experi√™ncias deste candidato, sugira 3 tipos de vagas onde teria boas chances. Explique por que, compet√™ncias valorizadas e palavras-chave para busca.`,

      geral: `Analise este curr√≠culo, incluindo o resumo profissional: 1) Pontos fortes (2), 2) √Åreas de melhoria (2), 3) Impress√£o geral do perfil profissional, 4) Nota de 0-10.`
    };

    // Usar prompt espec√≠fico ou default
    const promptBase = prompts[tipo] || prompts.geral;

    return `${promptBase}
    
    CURR√çCULO:
    ${textoCurriculo}
    
    Responda em portugu√™s, com formata√ß√£o clara e concisa.`;
  };

  const promptText = gerarPrompt(tipoAnalise, curriculoTexto);

  // Obter a API key para o tipo de IA selecionado
  const apiKey = await getIAAPIKey(tipoIA);

  // Verificar se precisa de API key e se ela est√° dispon√≠vel
  if (IA_APIS[tipoIA].chaveNecessaria && !apiKey) {
    console.error(`analisarCurriculoComIA: API key n√£o encontrada para ${IA_APIS[tipoIA].nome}`);
    return {
      success: false,
      analise: `N√£o foi poss√≠vel analisar o curr√≠culo: API key n√£o configurada para ${IA_APIS[tipoIA].nome}.`,
      offline: true,
      provider: IA_APIS[tipoIA].nome
    };
  }

  // Chamar a fun√ß√£o espec√≠fica para o tipo de IA
  try {
    const resultado = await chamarIAAPI(tipoIA, apiKey, promptText);

    // Salvar no cache
    try {
      await AsyncStorage.setItem(cacheKey, JSON.stringify({
        resultado: resultado,
        timestamp: new Date().toISOString()
      }));
    } catch (cacheError) {
      console.log('Erro ao salvar no cache:', cacheError.message);
    }

    return {
      success: true,
      analise: resultado,
      offline: false,
      provider: IA_APIS[tipoIA].nome
    };
  } catch (error) {
    console.error(`analisarCurriculoComIA: Erro ao chamar API de ${IA_APIS[tipoIA].nome}:`, error.message);

    // Tentar com Gemini como fallback se n√£o for Gemini que j√° falhou
    if (tipoIA !== 'GEMINI') {
      console.log('analisarCurriculoComIA: Tentando fallback para Gemini');
      try {
        return await analisarCurriculoComIA(curriculoData, tipoAnalise, 'GEMINI', false);
      } catch (fallbackError) {
        console.error('analisarCurriculoComIA: Fallback para Gemini tamb√©m falhou:', fallbackError.message);
      }
    }

    // √öltimo recurso: usar an√°lise local
    console.log('analisarCurriculoComIA: Usando an√°lise local como √∫ltimo recurso');
    return gerarAnaliseLocal(curriculoData, tipoAnalise);
  }
};

const LoginScreen = ({ navigation }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const { login } = useAuth();

  const handleLogin = async () => {
    if (!email || !password) {
      Alert.alert('Erro', 'Por favor, preencha todos os campos.');
      return;
    }

    setLoading(true);
    const result = await login(email, password);
    setLoading(false);

    if (result.success) {
      // Login bem-sucedido
    } else {
      Alert.alert('Erro', result.message || 'Erro ao fazer login.');
    }
  };

  return (
    <SafeAreaView style={styles.authContainer}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.primary} />
      <View style={styles.authHeader}>
        <Text style={styles.authTitle}>Login</Text>
        <Text style={styles.authSubtitle}>Entre na sua conta para continuar</Text>
      </View>

      <View style={styles.authForm}>
        <View style={styles.inputContainer}>
          <Text style={styles.inputLabel}>Email</Text>
          <View style={styles.enhancedInputWrapper}>
            <TextInput
              style={styles.enhancedInput}
              placeholder="Seu email"
              value={email}
              onChangeText={setEmail}
              keyboardType="email-address"
              autoCapitalize="none"
              placeholderTextColor="#9e9e9e"
            />
          </View>
        </View>

        <View style={styles.inputContainer}>
          <Text style={styles.inputLabel}>Senha</Text>
          <View style={styles.enhancedInputWrapper}>
            <TextInput
              style={styles.enhancedInput}
              placeholder="Sua senha"
              value={password}
              onChangeText={setPassword}
              secureTextEntry
              placeholderTextColor="#9e9e9e"
            />
          </View>
        </View>

        <TouchableOpacity
          style={styles.enhancedPrimaryButton}
          onPress={handleLogin}
          disabled={loading}
        >
          {loading ? (
            <ActivityIndicator size="small" color={Colors.white} />
          ) : (
            <Text style={styles.enhancedPrimaryButtonText}>Entrar</Text>
          )}
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.textButton}
          onPress={() => navigation.navigate('Register')}
        >
          <Text style={styles.textButtonText}>N√£o tem uma conta? Cadastre-se</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};


const SimularEntrevistaScreen = ({ navigation }) => {
  const { user } = useAuth();
  const [curriculos, setCurriculos] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    carregarCurriculos();
  }, []);

  const carregarCurriculos = async () => {
    try {
      setLoading(true);
      const cvs = await AsyncStorage.getItem(`curriculos_${user.id}`);
      setCurriculos(cvs ? JSON.parse(cvs) : []);
    } catch (error) {
      console.error('Erro ao carregar curr√≠culos:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel carregar seus curr√≠culos.');
    } finally {
      setLoading(false);
    }
  };

  const handleIniciarEntrevista = (curriculo) => {
    navigation.navigate('EntrevistaSimulada', { curriculoData: curriculo });
  };

  const handleEntrevistaGenerica = () => {
    navigation.navigate('EntrevistaSimulada', { curriculoData: null });
  };

  const formatDate = (dateString) => {
    try {
      if (!dateString) return 'Data n√£o dispon√≠vel';
      const date = new Date(dateString);
      return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
    } catch (error) {
      return 'Data inv√°lida';
    }
  };

  // Extrair informa√ß√µes do curr√≠culo para exibi√ß√£o
  const getResumoCurriculo = (curriculo) => {
    const cv = curriculo.data;
    const experiencias = cv.experiencias?.length || 0;
    const formacoes = cv.formacoes_academicas?.length || 0;
    const area = cv.informacoes_pessoais?.area || 'N√£o especificada';

    return { experiencias, formacoes, area };
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.dark} />

      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.backButtonText}>‚Äπ</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Simular Entrevista</Text>
      </View>

      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={Colors.primary} />
          <Text style={{ marginTop: 10 }}>Carregando curr√≠culos...</Text>
        </View>
      ) : (
        <View style={{ flex: 1, padding: 15 }}>
          <View style={{
            backgroundColor: '#e1f5fe',
            padding: 15,
            borderRadius: 10,
            marginBottom: 20,
            borderLeftWidth: 4,
            borderLeftColor: Colors.info,
          }}>
            <Text style={{
              fontSize: 18,
              fontWeight: 'bold',
              marginBottom: 5,
              color: Colors.dark,
            }}>
              Simulador de Entrevista com IA
            </Text>
            <Text style={{
              fontSize: 14,
              color: '#01579b',
              lineHeight: 22,
            }}>
              Prepare-se para suas entrevistas de emprego com nosso simulador inteligente. A IA far√° perguntas baseadas no seu curr√≠culo ou em um formato gen√©rico, avaliar√° suas respostas e fornecer√° feedback para melhorar seu desempenho.
            </Text>
          </View>

          {curriculos.length > 0 ? (
            <>
              <Text style={{
                fontSize: 16,
                fontWeight: 'bold',
                marginBottom: 10,
                color: Colors.dark,
              }}>
                Selecione um curr√≠culo para uma entrevista personalizada:
              </Text>

              <FlatList
                data={curriculos}
                keyExtractor={(item) => item.id}
                renderItem={({ item }) => {
                  const resumo = getResumoCurriculo(item);

                  return (
                    <TouchableOpacity
                      style={{
                        backgroundColor: Colors.white,
                        borderRadius: 10,
                        marginBottom: 15,
                        padding: 16,
                        ...Platform.select({
                          ios: {
                            shadowColor: '#000',
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: 0.1,
                            shadowRadius: 3,
                          },
                          android: {
                            elevation: 2,
                          },
                        }),
                        borderLeftWidth: 4,
                        borderLeftColor: Colors.primary,
                      }}
                      onPress={() => handleIniciarEntrevista(item)}
                    >
                      <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Text style={{
                          fontSize: 18,
                          fontWeight: 'bold',
                          color: Colors.dark,
                          marginBottom: 5,
                        }}>
                          {item.nome || 'Curr√≠culo sem nome'}
                        </Text>

                        <View style={{
                          backgroundColor: Colors.primary,
                          paddingVertical: 4,
                          paddingHorizontal: 8,
                          borderRadius: 15,
                        }}>
                          <Text style={{ color: Colors.white, fontSize: 12 }}>
                            Selecionar
                          </Text>
                        </View>
                      </View>

                      <Text style={{
                        fontSize: 14,
                        color: Colors.lightText,
                        marginBottom: 10,
                      }}>
                        Criado em: {formatDate(item.dataCriacao)}
                      </Text>

                      <View style={{
                        backgroundColor: '#f5f5f5',
                        padding: 10,
                        borderRadius: 5,
                        marginTop: 5,
                      }}>
                        <Text style={{ color: Colors.dark }}>
                          <Text style={{ fontWeight: 'bold' }}>√Årea: </Text>
                          {resumo.area}
                        </Text>

                        <View style={{ flexDirection: 'row', marginTop: 5, flexWrap: 'wrap' }}>
                          <View style={{
                            backgroundColor: Colors.primary,
                            paddingVertical: 3,
                            paddingHorizontal: 8,
                            borderRadius: 12,
                            marginRight: 8,
                            marginBottom: 5,
                          }}>
                            <Text style={{ color: Colors.white, fontSize: 12 }}>
                              {resumo.experiencias} experi√™ncia(s)
                            </Text>
                          </View>

                          <View style={{
                            backgroundColor: Colors.secondary,
                            paddingVertical: 3,
                            paddingHorizontal: 8,
                            borderRadius: 12,
                            marginRight: 8,
                            marginBottom: 5,
                          }}>
                            <Text style={{ color: Colors.white, fontSize: 12 }}>
                              {resumo.formacoes} forma√ß√£o(√µes)
                            </Text>
                          </View>
                        </View>
                      </View>
                    </TouchableOpacity>
                  );
                }}
              />
            </>
          ) : (
            <View style={{ alignItems: 'center', marginTop: 20 }}>
              <Text style={{ textAlign: 'center', marginBottom: 20 }}>
                Voc√™ ainda n√£o tem curr√≠culos cadastrados. Crie um curr√≠culo primeiro ou use o modo de entrevista gen√©rica.
              </Text>
              <TouchableOpacity
                style={{
                  backgroundColor: Colors.primary,
                  paddingVertical: 12,
                  paddingHorizontal: 20,
                  borderRadius: 8,
                  marginBottom: 15,
                }}
                onPress={() => navigation.navigate('Chatbot')}
              >
                <Text style={{ color: Colors.white, fontWeight: 'bold' }}>
                  Criar Novo Curr√≠culo
                </Text>
              </TouchableOpacity>
            </View>
          )}

          <View style={{
            backgroundColor: '#f9fbe7',
            padding: 15,
            borderRadius: 10,
            marginTop: 10,
            marginBottom: 20,
            borderLeftWidth: 4,
            borderLeftColor: '#9e9d24',
          }}>
            <Text style={{
              fontSize: 16,
              fontWeight: 'bold',
              marginBottom: 5,
              color: Colors.dark,
            }}>
              Entrevista Gen√©rica
            </Text>
            <Text style={{
              fontSize: 14,
              color: '#616161',
              marginBottom: 10,
            }}>
              Prefere uma entrevista sem v√≠nculo com um curr√≠culo espec√≠fico? Fa√ßa uma simula√ß√£o com perguntas gen√©ricas para qualquer cargo.
            </Text>
            <TouchableOpacity
              style={{
                backgroundColor: '#9e9d24',
                paddingVertical: 10,
                paddingHorizontal: 15,
                borderRadius: 8,
                alignSelf: 'flex-start',
              }}
              onPress={handleEntrevistaGenerica}
            >
              <Text style={{ color: Colors.white, fontWeight: 'bold' }}>
                Iniciar Entrevista Gen√©rica
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      )}
    </SafeAreaView>
  );
};

const EntrevistaSimuladaScreen = ({ route, navigation }) => {
  const { curriculoData } = route.params;
  const { user } = useAuth();
  const [entrevistaIniciada, setEntrevistaIniciada] = useState(false);
  const [carregando, setCarregando] = useState(false);
  const [perguntaAtual, setPerguntaAtual] = useState(null);
  const [resposta, setResposta] = useState('');
  const [historico, setHistorico] = useState([]);
  const [numeroPergunta, setNumeroPergunta] = useState(0);
  const [totalPerguntas, setTotalPerguntas] = useState(0);
  const [feedbackVisible, setFeedbackVisible] = useState(false);
  const [feedback, setFeedback] = useState('');
  const [finalizando, setFinalizando] = useState(false);
  const [concluido, setConcluido] = useState(false);
  const [avaliacaoFinal, setAvaliacaoFinal] = useState(null);
  const [tipoCargo, setTipoCargo] = useState('');
  const [area, setArea] = useState('');

  const flatListRef = useRef();
  const respostaInputRef = useRef();

  // Fun√ß√£o para iniciar a entrevista
  const iniciarEntrevista = async () => {
    try {
      setCarregando(true);

      // Verificar se √© uma entrevista baseada em curr√≠culo ou gen√©rica
      if (curriculoData) {
        // Extrair a √°rea e cargo do curr√≠culo para personalizar a entrevista
        const cv = curriculoData.data;
        const areaDoCV = cv.informacoes_pessoais?.area || '';
        setArea(areaDoCV);

        // Determinar o cargo com base na experi√™ncia mais recente, se dispon√≠vel
        if (cv.experiencias && cv.experiencias.length > 0) {
          setTipoCargo(cv.experiencias[0].cargo || '');
        }
      } else {
        // Para entrevista gen√©rica, solicitar informa√ß√µes
        Alert.prompt(
          "Informa√ß√µes para Entrevista",
          "Qual cargo ou √°rea voc√™ est√° buscando?",
          [
            {
              text: "Cancelar",
              onPress: () => navigation.goBack(),
              style: "cancel"
            },
            {
              text: "Continuar",
              onPress: input => {
                setArea(input || "√Årea n√£o especificada");
                prepararEntrevista(input);
              }
            }
          ],
          "plain-text"
        );
        return; // Aguardar input do usu√°rio
      }

      // Se temos curr√≠culo, continuar diretamente
      prepararEntrevista();

    } catch (error) {
      console.error('Erro ao iniciar entrevista:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel iniciar a entrevista. Tente novamente.');
      setCarregando(false);
    }
  };

  // Fun√ß√£o para preparar o conjunto de perguntas da entrevista
  const prepararEntrevista = async (areaInput = null) => {
    try {
      setCarregando(true);

      // Usar √°rea do input para entrevista gen√©rica, ou do curr√≠culo para espec√≠fica
      const areaFinal = areaInput || area;

      // Obter API key da IA
      const apiKey = await getIAAPIKey('GEMINI');

      if (!apiKey) {
        throw new Error("API key do Gemini n√£o configurada");
      }

      // Construir prompt para gerar perguntas de entrevista
      let promptText = "";

      if (curriculoData) {
        // Formatamos os dados do curr√≠culo
        const cv = curriculoData.data;
        const experiencias = cv.experiencias?.map(exp =>
          `${exp.cargo} em ${exp.empresa} (${exp.data_inicio || ''} - ${exp.data_fim || 'atual'}): ${exp.descricao || ''}`
        ).join('\n') || 'Sem experi√™ncias profissionais';

        const formacoes = cv.formacoes_academicas?.map(form =>
          `${form.diploma} em ${form.area_estudo} pela ${form.instituicao} (${form.data_inicio || ''} - ${form.data_fim || ''})`
        ).join('\n') || 'Sem forma√ß√£o acad√™mica';

        const habilidades = cv.projetos?.map(proj => proj.habilidades).filter(Boolean).join(', ') || 'N√£o especificadas';

        promptText = `
Voc√™ √© um recrutador experiente especializado em entrevistas para a √°rea de ${areaFinal}. Conduza uma entrevista simulada de emprego detalhada e realista para um candidato √† posi√ß√£o de ${tipoCargo || areaFinal}.

CURR√çCULO DO CANDIDATO:
Nome: ${cv.informacoes_pessoais?.nome || ''} ${cv.informacoes_pessoais?.sobrenome || ''}
√Årea: ${areaFinal}

Experi√™ncias:
${experiencias}

Forma√ß√£o:
${formacoes}

Habilidades:
${habilidades}

INSTRU√á√ïES PARA A ENTREVISTA:
1. Crie exatamente 10 perguntas desafiadoras e realistas baseadas no curr√≠culo do candidato
2. As perguntas devem incluir:
   - Perguntas comportamentais (situa√ß√µes espec√≠ficas)
   - Perguntas t√©cnicas relevantes para a √°rea
   - Perguntas sobre experi√™ncias anteriores
   - Perguntas sobre soft skills e trabalho em equipe
   - Pelo menos uma pergunta situacional de resolu√ß√£o de problemas
   - Pelo menos uma pergunta de motiva√ß√£o profissional

3. Elabore perguntas que um recrutador real faria, usando linguagem profissional
4. Foque em perguntas que extraiam informa√ß√µes sobre compet√™ncias, experi√™ncias e fit cultural
5. Use as informa√ß√µes do curr√≠culo para personalizar as perguntas
6. Inclua perguntas sobre poss√≠veis gaps no curr√≠culo ou √°reas de melhoria

FORMATO DE RESPOSTA:
Forne√ßa apenas um array JSON de objetos, cada um representando uma pergunta, na seguinte estrutura:
[
  {
    "pergunta": "texto da pergunta 1",
    "context": "contexto breve sobre por que essa pergunta est√° sendo feita",
    "tipo": "comportamental/t√©cnica/experi√™ncia/motivacional/situacional"
  },
  {
    "pergunta": "texto da pergunta 2",
    "context": "contexto breve sobre por que essa pergunta est√° sendo feita",
    "tipo": "comportamental/t√©cnica/experi√™ncia/motivacional/situacional"
  }
]

Apenas retorne o JSON puro, sem texto introdut√≥rio ou explica√ß√µes.
`;
      } else {
        // Prompt para entrevista gen√©rica
        promptText = `
Voc√™ √© um recrutador experiente especializado em entrevistas para a √°rea de ${areaFinal}. Conduza uma entrevista simulada de emprego detalhada e realista para um candidato.

INSTRU√á√ïES PARA A ENTREVISTA GEN√âRICA:
1. Crie exatamente 10 perguntas desafiadoras e realistas para uma entrevista de emprego na √°rea de ${areaFinal}
2. As perguntas devem incluir:
   - Perguntas comportamentais (situa√ß√µes espec√≠ficas)
   - Perguntas t√©cnicas relevantes para a √°rea
   - Perguntas sobre experi√™ncias anteriores
   - Perguntas sobre soft skills e trabalho em equipe
   - Pelo menos uma pergunta situacional de resolu√ß√£o de problemas
   - Pelo menos uma pergunta de motiva√ß√£o profissional

3. Elabore perguntas que um recrutador real faria, usando linguagem profissional
4. Foque em perguntas que extraiam informa√ß√µes sobre compet√™ncias, experi√™ncias e fit cultural
5. As perguntas devem ser gen√©ricas o suficiente para qualquer pessoa na √°rea, mas espec√≠ficas o suficiente para avaliar conhecimentos relevantes
6. Inclua perguntas t√≠picas de entrevistas para ${areaFinal} baseadas nas melhores pr√°ticas do mercado

FORMATO DE RESPOSTA:
Forne√ßa apenas um array JSON de objetos, cada um representando uma pergunta, na seguinte estrutura:
[
  {
    "pergunta": "texto da pergunta 1",
    "context": "contexto breve sobre por que essa pergunta est√° sendo feita",
    "tipo": "comportamental/t√©cnica/experi√™ncia/motivacional/situacional"
  },
  {
    "pergunta": "texto da pergunta 2",
    "context": "contexto breve sobre por que essa pergunta est√° sendo feita",
    "tipo": "comportamental/t√©cnica/experi√™ncia/motivacional/situacional"
  }
]

Apenas retorne o JSON puro, sem texto introdut√≥rio ou explica√ß√µes.
`;
      }

      // Chamar a API do Gemini para gerar perguntas
      const endpoint = `${IA_APIS.GEMINI.endpoint}?key=${apiKey}`;
      const requestBody = {
        contents: [{ parts: [{ text: promptText }] }],
        generationConfig: {
          temperature: 0.2,
          maxOutputTokens: 4000,
          topP: 0.8,
          topK: 40
        }
      };

      const response = await axios.post(endpoint, requestBody, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 30000
      });

      if (response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        const resultText = response.data.candidates[0].content.parts[0].text;

        // Extrair o JSON da resposta
        const jsonMatch = resultText.match(/\[[\s\S]*\]/);
        if (jsonMatch) {
          try {
            const perguntas = JSON.parse(jsonMatch[0]);
            setTotalPerguntas(perguntas.length);
            setNumeroPergunta(1);
            setPerguntaAtual(perguntas[0]);

            // Adicionar primeira pergunta ao hist√≥rico
            setHistorico([{
              id: '0',
              texto: perguntas[0].pergunta,
              isUser: false,
              context: perguntas[0].context,
              tipo: perguntas[0].tipo
            }]);

            // Salvar perguntas restantes no estado
            setEntrevistaIniciada(true);

            // Armazenar perguntas em AsyncStorage para recupera√ß√£o caso a app feche
            await AsyncStorage.setItem(`entrevista_perguntas_${user.id}`,
              JSON.stringify({
                perguntas,
                timestampInicio: new Date().toISOString(),
                curriculoId: curriculoData?.id || null,
                area: areaFinal,
                tipoCargo: tipoCargo
              })
            );
          } catch (jsonError) {
            console.error('Erro ao parsear JSON da resposta:', jsonError);
            throw new Error('Formato de resposta inv√°lido');
          }
        } else {
          throw new Error('N√£o foi poss√≠vel extrair perguntas da resposta');
        }
      } else {
        throw new Error('Formato de resposta inesperado do Gemini');
      }
    } catch (error) {
      console.error('Erro ao preparar entrevista:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel preparar a entrevista. Tente novamente mais tarde.');
    } finally {
      setCarregando(false);
    }
  };

  // Fun√ß√£o para processar a resposta do usu√°rio e fornecer feedback
  const enviarResposta = async () => {
    if (resposta.trim() === '') return;

    try {
      // Adicionar a resposta do usu√°rio ao hist√≥rico
      const novoHistorico = [...historico, {
        id: `u-${numeroPergunta}`,
        texto: resposta,
        isUser: true
      }];

      setHistorico(novoHistorico);
      setResposta('');
      setCarregando(true);

      // Obter API key da IA
      const apiKey = await getIAAPIKey('GEMINI');

      if (!apiKey) {
        throw new Error("API key do Gemini n√£o configurada");
      }

      // Obter entrevista armazenada
      const entrevistaJson = await AsyncStorage.getItem(`entrevista_perguntas_${user.id}`);
      if (!entrevistaJson) {
        throw new Error("Dados da entrevista n√£o encontrados");
      }

      const entrevistaData = JSON.parse(entrevistaJson);
      const perguntas = entrevistaData.perguntas;

      // Construir prompt para feedback da resposta
      const promptText = `
Voc√™ √© um recrutador experiente especializado em entrevistas para a √°rea de ${area || entrevistaData.area}.

PERGUNTA DA ENTREVISTA:
"${perguntaAtual.pergunta}"

Contexto da pergunta: ${perguntaAtual.context}
Tipo de pergunta: ${perguntaAtual.tipo}

RESPOSTA DO CANDIDATO:
"${resposta}"

TAREFA:
Analise a resposta do candidato √† pergunta de entrevista acima e forne√ßa um feedback detalhado:

1. Avalie a qualidade da resposta (escala de 1-10)
2. Identifique pontos fortes da resposta
3. Identifique pontos fracos ou informa√ß√µes faltantes
4. Forne√ßa sugest√µes espec√≠ficas para melhorar a resposta
5. Explique o que um recrutador buscaria neste tipo de resposta

FORMATO DE RESPOSTA:
{
  "pontuacao": 7,
  "pontos_fortes": ["ponto forte 1", "ponto forte 2"],
  "pontos_fracos": ["ponto fraco 1", "ponto fraco 2"],
  "sugestoes": ["sugest√£o 1", "sugest√£o 2"],
  "explicacao": "Explica√ß√£o sobre o que um recrutador busca nesta resposta",
  "resumo": "Um resumo conciso do feedback em um par√°grafo"
}

Retorne apenas o JSON puro, sem texto adicional.
`;

      // Chamar a API do Gemini para gerar feedback
      const endpoint = `${IA_APIS.GEMINI.endpoint}?key=${apiKey}`;
      const requestBody = {
        contents: [{ parts: [{ text: promptText }] }],
        generationConfig: {
          temperature: 0.3,
          maxOutputTokens: 2000,
          topP: 0.8,
          topK: 40
        }
      };

      const response = await axios.post(endpoint, requestBody, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 30000
      });

      if (response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        const resultText = response.data.candidates[0].content.parts[0].text;

        // Extrair o JSON da resposta
        const jsonMatch = resultText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          try {
            const feedbackData = JSON.parse(jsonMatch[0]);

            // Formatar feedback para exibi√ß√£o
            const feedbackFormatado = `## Feedback sobre sua resposta

**Pontua√ß√£o:** ${feedbackData.pontuacao}/10

**Pontos fortes:**
${feedbackData.pontos_fortes.map(ponto => `- ${ponto}`).join('\n')}

**Pontos a melhorar:**
${feedbackData.pontos_fracos.map(ponto => `- ${ponto}`).join('\n')}

**Sugest√µes:**
${feedbackData.sugestoes.map(sugestao => `- ${sugestao}`).join('\n')}

**O que o recrutador busca:**
${feedbackData.explicacao}

**Resumo:**
${feedbackData.resumo}`;

            setFeedback(feedbackFormatado);
            setFeedbackVisible(true);

            // Salvar feedback no hist√≥rico de entrevista
            await AsyncStorage.setItem(`entrevista_feedback_${user.id}_${numeroPergunta}`,
              JSON.stringify({
                pergunta: perguntaAtual.pergunta,
                resposta: resposta,
                feedback: feedbackData
              })
            );

          } catch (jsonError) {
            console.error('Erro ao parsear JSON do feedback:', jsonError);
            setFeedback("N√£o foi poss√≠vel gerar o feedback para sua resposta. Vamos continuar com a pr√≥xima pergunta.");
            setFeedbackVisible(true);
          }
        } else {
          setFeedback("N√£o foi poss√≠vel gerar o feedback para sua resposta. Vamos continuar com a pr√≥xima pergunta.");
          setFeedbackVisible(true);
        }
      } else {
        setFeedback("N√£o foi poss√≠vel gerar o feedback para sua resposta. Vamos continuar com a pr√≥xima pergunta.");
        setFeedbackVisible(true);
      }
    } catch (error) {
      console.error('Erro ao processar resposta:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel processar sua resposta. Tente novamente.');
    } finally {
      setCarregando(false);
    }
  };

  // Fun√ß√£o para prosseguir para a pr√≥xima pergunta
  const proximaPergunta = async () => {
    try {
      setFeedbackVisible(false);
      setFeedback('');

      // Obter entrevista armazenada
      const entrevistaJson = await AsyncStorage.getItem(`entrevista_perguntas_${user.id}`);
      if (!entrevistaJson) {
        throw new Error("Dados da entrevista n√£o encontrados");
      }

      const entrevistaData = JSON.parse(entrevistaJson);
      const perguntas = entrevistaData.perguntas;

      // Verificar se ainda h√° perguntas
      if (numeroPergunta < perguntas.length) {
        // Pr√≥xima pergunta
        const proximoNumero = numeroPergunta + 1;
        const proximaPergunta = perguntas[proximoNumero - 1];

        setNumeroPergunta(proximoNumero);
        setPerguntaAtual(proximaPergunta);

        // Adicionar pr√≥xima pergunta ao hist√≥rico
        setHistorico(prev => [...prev, {
          id: `${proximoNumero}`,
          texto: proximaPergunta.pergunta,
          isUser: false,
          context: proximaPergunta.context,
          tipo: proximaPergunta.tipo
        }]);

        // Rolar para o fim da lista
        if (flatListRef.current) {
          setTimeout(() => {
            flatListRef.current.scrollToEnd({ animated: true });
          }, 200);
        }
      } else {
        // Finalizar entrevista
        setFinalizando(true);
        gerarAvaliacaoFinal();
      }
    } catch (error) {
      console.error('Erro ao avan√ßar para pr√≥xima pergunta:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel carregar a pr√≥xima pergunta. Tente novamente.');
    }
  };

  // Fun√ß√£o para gerar avalia√ß√£o final da entrevista
  const gerarAvaliacaoFinal = async () => {
    try {
      setCarregando(true);

      // Obter API key da IA
      const apiKey = await getIAAPIKey('GEMINI');

      if (!apiKey) {
        throw new Error("API key do Gemini n√£o configurada");
      }

      // Recuperar todos os feedbacks armazenados
      const entrevistaJson = await AsyncStorage.getItem(`entrevista_perguntas_${user.id}`);
      if (!entrevistaJson) {
        throw new Error("Dados da entrevista n√£o encontrados");
      }

      const entrevistaData = JSON.parse(entrevistaJson);
      const perguntas = entrevistaData.perguntas;

      // Construir lista de perguntas e respostas
      let perguntasRespostas = [];

      for (let i = 1; i <= perguntas.length; i++) {
        const feedbackJson = await AsyncStorage.getItem(`entrevista_feedback_${user.id}_${i}`);
        if (feedbackJson) {
          const feedbackData = JSON.parse(feedbackJson);
          perguntasRespostas.push({
            pergunta: feedbackData.pergunta,
            resposta: feedbackData.resposta,
            feedback: feedbackData.feedback
          });
        }
      }

      // Construir prompt para avalia√ß√£o final
      const promptText = `
Voc√™ √© um recrutador experiente especializado em entrevistas para a √°rea de ${entrevistaData.area || area}.

CONTEXTO:
Foi conduzida uma entrevista simulada com um candidato para uma posi√ß√£o na √°rea de ${entrevistaData.area || area}${entrevistaData.tipoCargo ? `, com foco em ${entrevistaData.tipoCargo}` : ''}.

RESUMO DA ENTREVISTA:
${perguntasRespostas.map((item, index) => `
Pergunta ${index + 1}: "${item.pergunta}"
Resposta: "${item.resposta}"
Pontua√ß√£o: ${item.feedback.pontuacao}/10
`).join('\n')}

TAREFA:
Baseado nas respostas do candidato, fa√ßa uma avalia√ß√£o completa de seu desempenho na entrevista:

1. Calcule a pontua√ß√£o global (m√©dia das pontua√ß√µes individuais)
2. Identifique os 3-5 principais pontos fortes demonstrados
3. Identifique as 3-5 principais √°reas de melhoria
4. Forne√ßa 3-5 recomenda√ß√µes espec√≠ficas para melhorar em futuras entrevistas
5. Avalie as habilidades de comunica√ß√£o, estrutura√ß√£o de respostas e confian√ßa do candidato
6. D√™ uma avalia√ß√£o geral sobre as chances do candidato neste processo seletivo (baixa/m√©dia/alta)

FORMATO DE RESPOSTA:
{
  "pontuacao_global": 7.5,
  "pontos_fortes": [
    {"ponto": "Descri√ß√£o do ponto forte 1", "exemplo": "Exemplo espec√≠fico da entrevista"},
    {"ponto": "Descri√ß√£o do ponto forte 2", "exemplo": "Exemplo espec√≠fico da entrevista"}
  ],
  "areas_melhoria": [
    {"area": "Descri√ß√£o da √°rea 1", "sugestao": "Sugest√£o espec√≠fica"},
    {"area": "Descri√ß√£o da √°rea 2", "sugestao": "Sugest√£o espec√≠fica"}
  ],
  "recomendacoes": ["Recomenda√ß√£o 1", "Recomenda√ß√£o 2", "Recomenda√ß√£o 3"],
  "avaliacao_comunicacao": "An√°lise da comunica√ß√£o",
  "avaliacao_estrutura": "An√°lise da estrutura das respostas",
  "avaliacao_confianca": "An√°lise da confian√ßa demonstrada",
  "chance_sucesso": "m√©dia",
  "conclusao": "Conclus√£o geral sobre o desempenho em um par√°grafo"
}

Retorne apenas o JSON puro, sem texto adicional.
`;

      // Chamar a API do Gemini para gerar avalia√ß√£o final
      const endpoint = `${IA_APIS.GEMINI.endpoint}?key=${apiKey}`;
      const requestBody = {
        contents: [{ parts: [{ text: promptText }] }],
        generationConfig: {
          temperature: 0.2,
          maxOutputTokens: 4000,
          topP: 0.8,
          topK: 40
        }
      };

      const response = await axios.post(endpoint, requestBody, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 30000
      });

      if (response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        const resultText = response.data.candidates[0].content.parts[0].text;

        // Extrair o JSON da resposta
        const jsonMatch = resultText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          try {
            const avaliacaoData = JSON.parse(jsonMatch[0]);
            setAvaliacaoFinal(avaliacaoData);
            setConcluido(true);

            // Salvar avalia√ß√£o final
            await AsyncStorage.setItem(`entrevista_avaliacao_${user.id}`,
              JSON.stringify({
                avaliacao: avaliacaoData,
                timestamp: new Date().toISOString(),
                area: entrevistaData.area || area,
                tipoCargo: entrevistaData.tipoCargo || tipoCargo
              })
            );

          } catch (jsonError) {
            console.error('Erro ao parsear JSON da avalia√ß√£o final:', jsonError);
            throw new Error('Formato de resposta inv√°lido');
          }
        } else {
          throw new Error('N√£o foi poss√≠vel extrair avalia√ß√£o final da resposta');
        }
      } else {
        throw new Error('Formato de resposta inesperado do Gemini');
      }
    } catch (error) {
      console.error('Erro ao gerar avalia√ß√£o final:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel gerar a avalia√ß√£o final da entrevista. Tente novamente mais tarde.');
    } finally {
      setCarregando(false);
    }
  };

  // Hook para iniciar a entrevista quando o componente for montado
  useEffect(() => {
    if (!entrevistaIniciada && !carregando) {
      iniciarEntrevista();
    }
  }, []);

  // Fun√ß√£o para mapear o n√≠vel de chance de sucesso para uma cor
  const getChanceColor = (chance) => {
    switch (chance.toLowerCase()) {
      case 'alta':
        return Colors.success;
      case 'm√©dia':
        return Colors.warning;
      case 'baixa':
        return Colors.danger;
      default:
        return Colors.primary;
    }
  };

  // Renderizar mensagem de entrevista
  const renderMensagem = ({ item }) => (
    <View style={[
      styles.mensagemEntrevista,
      item.isUser ? styles.mensagemUsuario : styles.mensagemRecrutador
    ]}>
      <Text style={[
        styles.textoMensagem,
        item.isUser ? styles.textoMensagemUsuario : styles.textoMensagemRecrutador
      ]}>
        {item.texto}
      </Text>
      {!item.isUser && item.tipo && (
        <View style={styles.tipoPerguntaBadge}>
          <Text style={styles.tipoPerguntaTexto}>
            {item.tipo}
          </Text>
        </View>
      )}
    </View>
  );

  // Renderizar avalia√ß√£o final
  const renderAvaliacaoFinal = () => {
    if (!avaliacaoFinal) return null;

    return (
      <ScrollView style={styles.avaliacaoFinalContainer}>
        <View style={styles.avaliacaoHeader}>
          <Text style={styles.avaliacaoTitulo}>Avalia√ß√£o Final da Entrevista</Text>

          <View style={styles.pontuacaoContainer}>
            <Text style={styles.pontuacaoLabel}>Pontua√ß√£o Global</Text>
            <View style={styles.pontuacaoCircle}>
              <Text style={styles.pontuacaoValor}>
                {avaliacaoFinal.pontuacao_global.toFixed(1)}
              </Text>
              <Text style={styles.pontuacaoMax}>/10</Text>
            </View>
          </View>

          <View style={[
            styles.chanceSucessoContainer,
            { backgroundColor: getChanceColor(avaliacaoFinal.chance_sucesso) }
          ]}>
            <Text style={styles.chanceSucessoTexto}>
              Chance de sucesso: {avaliacaoFinal.chance_sucesso.toUpperCase()}
            </Text>
          </View>
        </View>

        <View style={styles.secaoAvaliacao}>
          <Text style={styles.secaoTitulo}>Pontos Fortes</Text>
          {avaliacaoFinal.pontos_fortes.map((ponto, index) => (
            <View key={`forte-${index}`} style={styles.pontoItem}>
              <Text style={styles.pontoTitulo}>{ponto.ponto}</Text>
              <Text style={styles.pontoExemplo}>{ponto.exemplo}</Text>
            </View>
          ))}
        </View>

        <View style={styles.secaoAvaliacao}>
          <Text style={styles.secaoTitulo}>√Åreas de Melhoria</Text>
          {avaliacaoFinal.areas_melhoria.map((area, index) => (
            <View key={`melhoria-${index}`} style={styles.pontoItem}>
              <Text style={styles.pontoTitulo}>{area.area}</Text>
              <Text style={styles.pontoExemplo}>{area.sugestao}</Text>
            </View>
          ))}
        </View>

        <View style={styles.secaoAvaliacao}>
          <Text style={styles.secaoTitulo}>Recomenda√ß√µes</Text>
          {avaliacaoFinal.recomendacoes.map((recomendacao, index) => (
            <View key={`rec-${index}`} style={styles.recomendacaoItem}>
              <Text style={styles.recomendacaoNumero}>{index + 1}</Text>
              <Text style={styles.recomendacaoTexto}>{recomendacao}</Text>
            </View>
          ))}
        </View>

        <View style={styles.secaoAvaliacao}>
          <Text style={styles.secaoTitulo}>Avalia√ß√£o Detalhada</Text>

          <View style={styles.avaliacaoDetalheItem}>
            <Text style={styles.avaliacaoDetalheTitulo}>Comunica√ß√£o:</Text>
            <Text style={styles.avaliacaoDetalheTexto}>{avaliacaoFinal.avaliacao_comunicacao}</Text>
          </View>

          <View style={styles.avaliacaoDetalheItem}>
            <Text style={styles.avaliacaoDetalheTitulo}>Estrutura das Respostas:</Text>
            <Text style={styles.avaliacaoDetalheTexto}>{avaliacaoFinal.avaliacao_estrutura}</Text>
          </View>

          <View style={styles.avaliacaoDetalheItem}>
            <Text style={styles.avaliacaoDetalheTitulo}>Confian√ßa:</Text>
            <Text style={styles.avaliacaoDetalheTexto}>{avaliacaoFinal.avaliacao_confianca}</Text>
          </View>
        </View>

        <View style={styles.conclusaoContainer}>
          <Text style={styles.conclusaoTitulo}>Conclus√£o</Text>
          <Text style={styles.conclusaoTexto}>{avaliacaoFinal.conclusao}</Text>
        </View>

        <TouchableOpacity
          style={styles.botaoEncerrar}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.textoEncerrar}>Encerrar Entrevista</Text>
        </TouchableOpacity>
      </ScrollView>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.dark} />

      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => {
            if (entrevistaIniciada && !concluido) {
              Alert.alert(
                "Sair da entrevista",
                "Tem certeza que deseja sair? Seu progresso ser√° perdido.",
                [
                  { text: "Cancelar", style: "cancel" },
                  { text: "Sair", onPress: () => navigation.goBack() }
                ]
              );
            } else {
              navigation.goBack();
            }
          }}
        >
          <Text style={styles.backButtonText}>‚Äπ</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>
          {concluido ? 'Resultado da Entrevista' : 'Entrevista Simulada'}
        </Text>
      </View>

      {carregando && !entrevistaIniciada ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={Colors.primary} />
          <Text style={styles.loadingText}>
            Preparando sua entrevista{curriculoData ? ' personalizada' : ' gen√©rica'}...
          </Text>
        </View>
      ) : concluido ? (
        renderAvaliacaoFinal()
      ) : (
        <View style={styles.entrevistaContainer}>
          <View style={styles.progressoContainer}>
            <View style={styles.progressoTrack}>
              <View
                style={[
                  styles.progressoFill,
                  { width: `${(numeroPergunta / totalPerguntas) * 100}%` }
                ]}
              />
            </View>
            <Text style={styles.progressoTexto}>
              Pergunta {numeroPergunta} de {totalPerguntas}
            </Text>
          </View>

          <FlatList
            ref={flatListRef}
            data={historico}
            keyExtractor={(item) => item.id}
            renderItem={renderMensagem}
            contentContainerStyle={styles.mensagensLista}
            onLayout={() => {
              if (flatListRef.current) {
                flatListRef.current.scrollToEnd({ animated: true });
              }
            }}
          />

          {feedbackVisible ? (
            <View style={styles.feedbackContainer}>
              <Text style={styles.feedbackTitulo}>Feedback do Recrutador</Text>

              <ScrollView style={styles.feedbackScrollView}>
                <Markdown
                  style={{
                    body: { fontSize: 14, lineHeight: 20, color: Colors.dark },
                    heading2: {
                      fontSize: 16,
                      fontWeight: 'bold',
                      marginBottom: 10,
                      color: Colors.dark
                    },
                    bullet_list: { marginVertical: 5 },
                    paragraph: { marginBottom: 10 },
                    strong: { fontWeight: 'bold' },
                  }}
                >
                  {feedback}
                </Markdown>
              </ScrollView>

              <TouchableOpacity
                style={styles.continuarButton}
                onPress={proximaPergunta}
              >
                <Text style={styles.continuarButtonText}>
                  {numeroPergunta === totalPerguntas ? 'Finalizar Entrevista' : 'Pr√≥xima Pergunta'}
                </Text>
              </TouchableOpacity>
            </View>
          ) : (
            <View style={styles.inputContainer}>
              <TextInput
                ref={respostaInputRef}
                style={styles.input}
                placeholder="Digite sua resposta aqui..."
                value={resposta}
                onChangeText={setResposta}
                multiline
                textAlignVertical="top"
                editable={!carregando}
              />

              <TouchableOpacity
                style={[
                  styles.enviarButton,
                  (resposta.trim() === '' || carregando) && styles.enviarButtonDisabled
                ]}
                onPress={enviarResposta}
                disabled={resposta.trim() === '' || carregando}
              >
                {carregando ? (
                  <ActivityIndicator color={Colors.white} size="small" />
                ) : (
                  <Text style={styles.enviarButtonText}>Enviar</Text>
                )}
              </TouchableOpacity>
            </View>
          )}
        </View>
      )}
    </SafeAreaView>
  );
};


const CurriculosAnaliseScreen = ({ navigation }) => {
  const { user } = useAuth();
  const [curriculos, setCurriculos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [fadeValue, setFadeValue] = useState(0); // Usar um valor num√©rico em vez de Animated.Value

  const loadCurriculos = async () => {
    try {
      setLoading(true);
      const cvs = await AsyncStorage.getItem(`curriculos_${user.id}`);
      const curriculosData = cvs ? JSON.parse(cvs) : [];
      setCurriculos(curriculosData);

      // Atualizamos para 1 ap√≥s carregar os dados
      setTimeout(() => {
        setFadeValue(1);
      }, 100);
    } catch (error) {
      console.error('Erro ao carregar curr√≠culos:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel carregar seus curr√≠culos.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadCurriculos();
  }, []);

  // Fun√ß√£o para extrair informa√ß√µes do curr√≠culo para exibi√ß√£o
  const getResumoCurriculo = (curriculo) => {
    const cv = curriculo.data;
    const experiencias = cv.experiencias?.length || 0;
    const formacoes = cv.formacoes_academicas?.length || 0;
    const projetos = cv.projetos?.length || 0;
    const idiomas = cv.idiomas?.length || 0;
    const area = cv.informacoes_pessoais?.area || 'N√£o especificada';

    return { experiencias, formacoes, projetos, idiomas, area };
  };

  // Formatar data de maneira mais leg√≠vel
  const formatDate = (dateString) => {
    try {
      if (!dateString) return 'Data n√£o dispon√≠vel';
      const date = new Date(dateString);
      return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
    } catch (error) {
      return 'Data inv√°lida';
    }
  };

  if (loading) {
    return (
      <SafeAreaView style={curriculoAnaliseStyles.container}>
        <View style={curriculoAnaliseStyles.header}>
          <TouchableOpacity
            style={curriculoAnaliseStyles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Text style={curriculoAnaliseStyles.backButtonText}>‚Äπ</Text>
          </TouchableOpacity>
          <Text style={curriculoAnaliseStyles.headerTitle}>Analisar Curr√≠culo</Text>
        </View>
        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
          <ActivityIndicator size="large" color={ProfessionalColors.primary} />
          <Text style={{ marginTop: 16, color: ProfessionalColors.textMedium, fontSize: 16 }}>
            Carregando curr√≠culos...
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  if (curriculos.length === 0) {
    return (
      <SafeAreaView style={curriculoAnaliseStyles.container}>
        <View style={curriculoAnaliseStyles.header}>
          <TouchableOpacity
            style={curriculoAnaliseStyles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Text style={curriculoAnaliseStyles.backButtonText}>‚Äπ</Text>
          </TouchableOpacity>
          <Text style={curriculoAnaliseStyles.headerTitle}>Analisar Curr√≠culo</Text>
        </View>
        <View style={curriculoAnaliseStyles.emptyState}>
          <DocumentIcon style={curriculoAnaliseStyles.emptyStateIcon} />
          <Text style={curriculoAnaliseStyles.emptyStateTitle}>Nenhum Curr√≠culo Encontrado</Text>
          <Text style={curriculoAnaliseStyles.emptyStateText}>
            Voc√™ precisa criar um curr√≠culo antes de usar nossa poderosa an√°lise de IA para aprimor√°-lo.
          </Text>
          <TouchableOpacity
            style={curriculoAnaliseStyles.emptyStateButton}
            onPress={() => navigation.navigate('Chatbot')}
          >
            <Text style={curriculoAnaliseStyles.emptyStateButtonText}>Criar Meu Curr√≠culo</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={curriculoAnaliseStyles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={ProfessionalColors.cardBackground} />

      <View style={curriculoAnaliseStyles.header}>
        <TouchableOpacity
          style={curriculoAnaliseStyles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={curriculoAnaliseStyles.backButtonText}>‚Äπ</Text>
        </TouchableOpacity>
        <Text style={curriculoAnaliseStyles.headerTitle}>Analisar Curr√≠culo</Text>
      </View>

      <ScrollView contentContainerStyle={{ paddingBottom: 20 }}>
        <View style={curriculoAnaliseStyles.introContainer}>
          <Text style={curriculoAnaliseStyles.introTitle}>An√°lise Profissional com IA</Text>
          <Text style={curriculoAnaliseStyles.introText}>
            Nossa tecnologia de IA avan√ßada analisar√° seu curr√≠culo e fornecer√° feedback detalhado,
            identificar√° pontos fortes e fracos, e sugerir√° melhorias personalizadas para aumentar
            suas chances de sucesso.
          </Text>
        </View>

        <Text style={curriculoAnaliseStyles.sectionTitle}>Selecione um curr√≠culo para analisar:</Text>

        {/* N√£o usamos a propriedade opacity com Animated aqui */}
        <FlatList
          data={curriculos}
          keyExtractor={(item) => item.id}
          contentContainerStyle={{ paddingBottom: 20 }}
          style={{ opacity: fadeValue }} // Usamos um valor num√©rico normal
          renderItem={({ item }) => {
            const resumo = getResumoCurriculo(item);

            return (
              <View style={curriculoAnaliseStyles.curriculoCard}>
                <View style={curriculoAnaliseStyles.curriculoCardContent}>
                  <View style={curriculoAnaliseStyles.curriculoCardHeader}>
                    <View>
                      <Text style={curriculoAnaliseStyles.curriculoCardTitle}>
                        {item.nome || 'Curr√≠culo sem nome'}
                      </Text>
                      <Text style={curriculoAnaliseStyles.curriculoCardDate}>
                        Criado em {formatDate(item.dataCriacao)}
                      </Text>
                    </View>

                    <TouchableOpacity
                      style={curriculoAnaliseStyles.curriculoCardBadge}
                    >
                      <Text style={curriculoAnaliseStyles.curriculoCardBadgeText}>
                        Selecionar
                      </Text>
                    </TouchableOpacity>
                  </View>

                  <View style={curriculoAnaliseStyles.curriculoCardStats}>
                    <View style={curriculoAnaliseStyles.curriculoCardStatItem}>
                      <Text style={curriculoAnaliseStyles.curriculoCardStatText}>
                        √Årea: {resumo.area}
                      </Text>
                    </View>

                    {resumo.experiencias > 0 && (
                      <View style={curriculoAnaliseStyles.curriculoCardStatItem}>
                        <Text style={curriculoAnaliseStyles.curriculoCardStatText}>
                          {resumo.experiencias} experi√™ncia(s)
                        </Text>
                      </View>
                    )}

                    {resumo.formacoes > 0 && (
                      <View style={curriculoAnaliseStyles.curriculoCardStatItem}>
                        <Text style={curriculoAnaliseStyles.curriculoCardStatText}>
                          {resumo.formacoes} forma√ß√£o(√µes)
                        </Text>
                      </View>
                    )}

                    {resumo.projetos > 0 && (
                      <View style={curriculoAnaliseStyles.curriculoCardStatItem}>
                        <Text style={curriculoAnaliseStyles.curriculoCardStatText}>
                          {resumo.projetos} projeto(s)
                        </Text>
                      </View>
                    )}

                    {resumo.idiomas > 0 && (
                      <View style={curriculoAnaliseStyles.curriculoCardStatItem}>
                        <Text style={curriculoAnaliseStyles.curriculoCardStatText}>
                          {resumo.idiomas} idioma(s)
                        </Text>
                      </View>
                    )}
                  </View>
                </View>

                <View style={curriculoAnaliseStyles.curriculoCardFooter}>
                  <TouchableOpacity
                    style={curriculoAnaliseStyles.curriculoCardButton}
                    onPress={() => navigation.navigate('PreviewCV', { curriculoData: item })}
                  >
                    <Text style={curriculoAnaliseStyles.curriculoCardButtonText}>
                      <Text>üîç</Text> Visualizar
                    </Text>
                  </TouchableOpacity>

                  <View style={curriculoAnaliseStyles.curriculoCardButtonDivider} />

                  <TouchableOpacity
                    style={curriculoAnaliseStyles.curriculoCardButton}
                    onPress={() => navigation.navigate('AnaliseCV', { curriculoData: item })}
                  >
                    <Text style={curriculoAnaliseStyles.curriculoCardButtonText}>
                      <Text>üìä</Text> Analisar
                    </Text>
                  </TouchableOpacity>
                </View>
              </View>
            );
          }}
        />

        <TouchableOpacity
          style={curriculoAnaliseStyles.analyzeButton}
          onPress={() => navigation.navigate('AnaliseCV', { curriculoData: curriculos[0] })}
        >
          <Text>üß†</Text>
          <Text style={curriculoAnaliseStyles.analyzeButtonText}>
            An√°lise Completa com IA
          </Text>
        </TouchableOpacity>
      </ScrollView>
    </SafeAreaView>
  );
};

const MeusCurriculosScreen = ({ navigation }) => {
  const { user } = useAuth();
  const [curriculos, setCurriculos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchText, setSearchText] = useState('');
  const [filteredCurriculos, setFilteredCurriculos] = useState([]);
  const [showMenu, setShowMenu] = useState(false);
  const [selectedCurriculoId, setSelectedCurriculoId] = useState(null);
  const [fadeValue, setFadeValue] = useState(0); // Valor num√©rico para fade

  // Refer√™ncia para posi√ß√£o do menu
  const menuPosition = useRef({ x: 0, y: 0 });

  const loadCurriculos = async () => {
    try {
      setLoading(true);
      const cvs = await AsyncStorage.getItem(`curriculos_${user.id}`);
      const curriculosData = cvs ? JSON.parse(cvs) : [];
      setCurriculos(curriculosData);
      setFilteredCurriculos(curriculosData);

      // Usando um valor num√©rico para fade
      setTimeout(() => {
        setFadeValue(1);
      }, 100);
    } catch (error) {
      console.error('Erro ao carregar curr√≠culos:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel carregar seus curr√≠culos.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadCurriculos();

    // Atualizar quando a tela ganhar foco
    const unsubscribe = navigation.addListener('focus', () => {
      loadCurriculos();
    });

    return unsubscribe;
  }, [navigation]);

  // Filtrar curr√≠culos com base no texto de pesquisa
  useEffect(() => {
    if (searchText.trim() === '') {
      setFilteredCurriculos(curriculos);
    } else {
      const filtered = curriculos.filter(cv =>
        cv.nome?.toLowerCase().includes(searchText.toLowerCase())
      );
      setFilteredCurriculos(filtered);
    }
  }, [searchText, curriculos]);

  const handleDeleteCV = (id) => {
    setShowMenu(false);

    Alert.alert(
      "Excluir Curr√≠culo",
      "Tem certeza que deseja excluir este curr√≠culo?",
      [
        {
          text: "Cancelar",
          style: "cancel"
        },
        {
          text: "Excluir",
          style: "destructive",
          onPress: async () => {
            try {
              const updatedCurriculos = curriculos.filter(cv => cv.id !== id);
              await AsyncStorage.setItem(`curriculos_${user.id}`, JSON.stringify(updatedCurriculos));
              setCurriculos(updatedCurriculos);
              setFilteredCurriculos(
                filteredCurriculos.filter(cv => cv.id !== id)
              );

              // Adicionar mensagem de sucesso
              Alert.alert(
                "Sucesso",
                "Curr√≠culo exclu√≠do com sucesso!"
              );
            } catch (error) {
              console.error('Erro ao excluir curr√≠culo:', error);
              Alert.alert('Erro', 'N√£o foi poss√≠vel excluir o curr√≠culo.');
            }
          }
        }
      ]
    );
  };

  const handleViewCV = (cv) => {
    navigation.navigate('PreviewCV', { curriculoData: cv });
  };

  // Nova fun√ß√£o para editar curr√≠culo
  const handleEditCV = (cv) => {
    navigation.navigate('EditarCurriculo', { curriculoData: cv });
  };

  const handleAnalyzeCV = (cv) => {
    navigation.navigate('AnaliseCV', { curriculoData: cv });
  };

  const handleShareCV = (cv) => {
    // Simular compartilhamento
    Share.share({
      message: `Curr√≠culo de ${cv.nome || 'Usu√°rio'} - ${formatDate(cv.dataCriacao)}`,
      title: `Curr√≠culo - ${cv.nome || 'Usu√°rio'}`
    }).catch(error => {
      console.error('Erro ao compartilhar:', error);
    });
  };

  const showContextMenu = (id, event) => {
    // Salvar a posi√ß√£o para o menu
    menuPosition.current = {
      x: event.nativeEvent.pageX - 180,  // Ajustar para o menu n√£o ficar fora da tela
      y: event.nativeEvent.pageY
    };
    setSelectedCurriculoId(id);
    setShowMenu(true);
  };

  const formatDate = (dateString) => {
    try {
      if (!dateString) return 'Data n√£o dispon√≠vel';
      const date = new Date(dateString);
      return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
    } catch (error) {
      return 'Data inv√°lida';
    }
  };

  // Obter resumo do curr√≠culo
  const getCurriculoDetails = (curriculo) => {
    const cv = curriculo.data;
    const area = cv.informacoes_pessoais?.area || 'N√£o especificada';
    const experiencias = cv.experiencias?.length || 0;
    const ultimaExperiencia = cv.experiencias?.length > 0
      ? cv.experiencias[0].cargo + ' em ' + cv.experiencias[0].empresa
      : 'Nenhuma experi√™ncia';
    const formacoes = cv.formacoes_academicas?.length || 0;
    const ultimaFormacao = cv.formacoes_academicas?.length > 0
      ? cv.formacoes_academicas[0].diploma + ' em ' + cv.formacoes_academicas[0].area_estudo
      : 'Nenhuma forma√ß√£o';

    return { area, experiencias, ultimaExperiencia, formacoes, ultimaFormacao };
  };

  if (loading) {
    return (
      <SafeAreaView style={meusCurriculosStyles.container}>
        <View style={meusCurriculosStyles.header}>
          <TouchableOpacity
            style={meusCurriculosStyles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Text style={meusCurriculosStyles.backButtonText}>‚Äπ</Text>
          </TouchableOpacity>
          <Text style={meusCurriculosStyles.headerTitle}>Gerenciar Curr√≠culos</Text>
        </View>
        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
          <ActivityIndicator size="large" color={ProfessionalColors.primary} />
          <Text style={{ marginTop: 16, color: ProfessionalColors.textMedium, fontSize: 16 }}>
            Carregando curr√≠culos...
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  if (curriculos.length === 0) {
    return (
      <SafeAreaView style={meusCurriculosStyles.container}>
        <View style={meusCurriculosStyles.header}>
          <TouchableOpacity
            style={meusCurriculosStyles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Text style={meusCurriculosStyles.backButtonText}>‚Äπ</Text>
          </TouchableOpacity>
          <Text style={meusCurriculosStyles.headerTitle}>Gerenciar Curr√≠culos</Text>
        </View>
        <View style={meusCurriculosStyles.emptyState}>
          <DocumentIcon style={meusCurriculosStyles.emptyStateIcon} />
          <Text style={meusCurriculosStyles.emptyStateTitle}>Nenhum Curr√≠culo Encontrado</Text>
          <Text style={meusCurriculosStyles.emptyStateText}>
            Voc√™ ainda n√£o criou nenhum curr√≠culo. Crie seu primeiro curr√≠culo profissional agora mesmo!
          </Text>
          <TouchableOpacity
            style={meusCurriculosStyles.emptyStateButton}
            onPress={() => navigation.navigate('Chatbot')}
          >
            <Text style={meusCurriculosStyles.emptyStateButtonText}>Criar Curr√≠culo</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={meusCurriculosStyles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={ProfessionalColors.cardBackground} />

      <View style={meusCurriculosStyles.header}>
        <TouchableOpacity
          style={meusCurriculosStyles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={meusCurriculosStyles.backButtonText}>‚Äπ</Text>
        </TouchableOpacity>
        <Text style={meusCurriculosStyles.headerTitle}>Gerenciar Curr√≠culos</Text>

        <View style={meusCurriculosStyles.headerActions}>
          <TouchableOpacity style={meusCurriculosStyles.headerActionButton}>
            <Text style={meusCurriculosStyles.headerActionIcon}>‚öôÔ∏è</Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* Barra de pesquisa */}
      <View style={meusCurriculosStyles.searchContainer}>
        <Text style={meusCurriculosStyles.searchIcon}>üîç</Text>
        <TextInput
          style={meusCurriculosStyles.searchInput}
          placeholder="Buscar curr√≠culos..."
          value={searchText}
          onChangeText={setSearchText}
        />
      </View>

      {/* Header da se√ß√£o */}
      <View style={meusCurriculosStyles.sectionHeader}>
        <Text style={meusCurriculosStyles.sectionTitle}>
          Seus Curr√≠culos ({filteredCurriculos.length})
        </Text>
        <TouchableOpacity>
          <Text style={meusCurriculosStyles.sectionActionText}>Ordenar</Text>
        </TouchableOpacity>
      </View>

      <FlatList
        data={filteredCurriculos}
        keyExtractor={(item) => item.id}
        contentContainerStyle={{ paddingBottom: 80 }}
        style={{ opacity: fadeValue }} // Usando valor num√©rico
        renderItem={({ item }) => {
          const details = getCurriculoDetails(item);

          return (
            <View style={meusCurriculosStyles.curriculoCard}>
              <TouchableOpacity
                style={meusCurriculosStyles.curriculoCardContent}
                onPress={() => handleViewCV(item)}
                onLongPress={(event) => showContextMenu(item.id, event)}
              >
                <View style={meusCurriculosStyles.curriculoCardHeader}>
                  <Text style={meusCurriculosStyles.curriculoCardTitle}>
                    {item.nome || 'Curr√≠culo sem nome'}
                  </Text>

                  {/* Menu de contexto */}
                  <TouchableOpacity
                    onPress={(event) => showContextMenu(item.id, event)}
                    hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
                  >
                    <Text>‚ãÆ</Text>
                  </TouchableOpacity>
                </View>

                <View style={meusCurriculosStyles.curriculoCardMeta}>
                  <Text style={meusCurriculosStyles.curriculoCardMetaIcon}>üìÖ</Text>
                  <Text style={meusCurriculosStyles.curriculoCardMetaText}>
                    Criado em {formatDate(item.dataCriacao)}
                  </Text>
                </View>

                <View style={meusCurriculosStyles.curriculoCardDetails}>
                  <View style={meusCurriculosStyles.curriculoCardDetailsRow}>
                    <Text style={meusCurriculosStyles.curriculoCardDetailsLabel}>√Årea:</Text>
                    <Text style={meusCurriculosStyles.curriculoCardDetailsValue}>
                      {details.area}
                    </Text>
                  </View>

                  <View style={meusCurriculosStyles.curriculoCardDetailsRow}>
                    <Text style={meusCurriculosStyles.curriculoCardDetailsLabel}>Experi√™ncia:</Text>
                    <Text style={meusCurriculosStyles.curriculoCardDetailsValue}>
                      {details.ultimaExperiencia}
                    </Text>
                  </View>

                  <View style={meusCurriculosStyles.curriculoCardDetailsRow}>
                    <Text style={meusCurriculosStyles.curriculoCardDetailsLabel}>Forma√ß√£o:</Text>
                    <Text style={meusCurriculosStyles.curriculoCardDetailsValue}>
                      {details.ultimaFormacao}
                    </Text>
                  </View>
                </View>

                <View style={meusCurriculosStyles.curriculoCardTagsContainer}>
                  <View style={meusCurriculosStyles.curriculoCardTag}>
                    <Text style={meusCurriculosStyles.curriculoCardTagText}>
                      {details.experiencias} experi√™ncia(s)
                    </Text>
                  </View>

                  <View style={meusCurriculosStyles.curriculoCardTag}>
                    <Text style={meusCurriculosStyles.curriculoCardTagText}>
                      {details.formacoes} forma√ß√£o(√µes)
                    </Text>
                  </View>
                </View>
              </TouchableOpacity>

              <View style={meusCurriculosStyles.curriculoCardActions}>
                <TouchableOpacity
                  style={meusCurriculosStyles.curriculoCardAction}
                  onPress={() => handleViewCV(item)}
                >
                  <Text style={[
                    meusCurriculosStyles.curriculoCardActionText,
                    meusCurriculosStyles.curriculoCardActionPrimary
                  ]}>
                    <Text>üëÅÔ∏è</Text> Visualizar
                  </Text>
                </TouchableOpacity>

                <View style={meusCurriculosStyles.curriculoCardDivider} />

                {/* Novo bot√£o de edi√ß√£o */}
                <TouchableOpacity
                  style={meusCurriculosStyles.curriculoCardAction}
                  onPress={() => handleEditCV(item)}
                >
                  <Text style={[
                    meusCurriculosStyles.curriculoCardActionText,
                    meusCurriculosStyles.curriculoCardActionPrimary
                  ]}>
                    <Text>‚úèÔ∏è</Text> Editar
                  </Text>
                </TouchableOpacity>

                <View style={meusCurriculosStyles.curriculoCardDivider} />

                <TouchableOpacity
                  style={meusCurriculosStyles.curriculoCardAction}
                  onPress={() => handleAnalyzeCV(item)}
                >
                  <Text style={[
                    meusCurriculosStyles.curriculoCardActionText,
                    meusCurriculosStyles.curriculoCardActionSecondary
                  ]}>
                    <Text>üìä</Text> Analisar
                  </Text>
                </TouchableOpacity>

                <View style={meusCurriculosStyles.curriculoCardDivider} />

                <TouchableOpacity
                  style={meusCurriculosStyles.curriculoCardAction}
                  onPress={() => handleDeleteCV(item.id)}
                >
                  <Text style={[
                    meusCurriculosStyles.curriculoCardActionText,
                    meusCurriculosStyles.curriculoCardActionDanger
                  ]}>
                    <Text>üóëÔ∏è</Text> Excluir
                  </Text>
                </TouchableOpacity>
              </View>
            </View>
          );
        }}
      />

      {/* Menu de contexto */}
      {showMenu && (
        <TouchableOpacity
          style={meusCurriculosStyles.modalOverlay}
          activeOpacity={1}
          onPress={() => setShowMenu(false)}
        >
          <View style={[
            meusCurriculosStyles.menuOptions,
            {
              position: 'absolute',
              top: menuPosition.current.y,
              left: menuPosition.current.x
            }
          ]}>
            <TouchableOpacity
              style={meusCurriculosStyles.menuOption}
              onPress={() => {
                setShowMenu(false);
                const cv = curriculos.find(c => c.id === selectedCurriculoId);
                if (cv) handleViewCV(cv);
              }}
            >
              <Text>üëÅÔ∏è</Text>
              <Text style={meusCurriculosStyles.menuOptionText}>Visualizar</Text>
            </TouchableOpacity>

            {/* Adicionar op√ß√£o de edi√ß√£o no menu de contexto tamb√©m */}
            <TouchableOpacity
              style={meusCurriculosStyles.menuOption}
              onPress={() => {
                setShowMenu(false);
                const cv = curriculos.find(c => c.id === selectedCurriculoId);
                if (cv) handleEditCV(cv);
              }}
            >
              <Text>‚úèÔ∏è</Text>
              <Text style={meusCurriculosStyles.menuOptionText}>Editar</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={meusCurriculosStyles.menuOption}
              onPress={() => {
                setShowMenu(false);
                const cv = curriculos.find(c => c.id === selectedCurriculoId);
                if (cv) handleAnalyzeCV(cv);
              }}
            >
              <Text>üìä</Text>
              <Text style={meusCurriculosStyles.menuOptionText}>Analisar</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={meusCurriculosStyles.menuOption}
              onPress={() => {
                setShowMenu(false);
                const cv = curriculos.find(c => c.id === selectedCurriculoId);
                if (cv) handleShareCV(cv);
              }}
            >
              <Text>üì§</Text>
              <Text style={meusCurriculosStyles.menuOptionText}>Compartilhar</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={meusCurriculosStyles.menuOption}
              onPress={() => {
                if (selectedCurriculoId) handleDeleteCV(selectedCurriculoId);
              }}
            >
              <Text>üóëÔ∏è</Text>
              <Text style={[meusCurriculosStyles.menuOptionText, meusCurriculosStyles.menuOptionDanger]}>
                Excluir
              </Text>
            </TouchableOpacity>
          </View>
        </TouchableOpacity>
      )}

      <TouchableOpacity
        style={meusCurriculosStyles.fabButton}
        onPress={() => navigation.navigate('Chatbot')}
      >
        <Text style={meusCurriculosStyles.fabButtonText}>+</Text>
      </TouchableOpacity>
    </SafeAreaView>
  );
};

// Componente para se√ß√£o de itens no menu
const MenuItemSection = ({ title, children }) => (
  <View style={{ marginBottom: 15 }}>
    <Text style={{
      paddingHorizontal: 20,
      paddingVertical: 5,
      color: Colors.lightText,
      fontSize: 12,
      fontWeight: 'bold',
      textTransform: 'uppercase',
      backgroundColor: '#f5f5f5'
    }}>
      {title}
    </Text>
    {children}
  </View>
);

// Componente para item de menu
const MenuItem = ({ icon, title, onPress, badge, textColor = Colors.dark }) => (
  <TouchableOpacity
    style={{
      flexDirection: 'row',
      alignItems: 'center',
      paddingVertical: 12,
      paddingHorizontal: 20,
    }}
    onPress={onPress}
  >
    <Ionicons name={icon} size={22} color={textColor} style={{ marginRight: 15 }} />
    <Text style={{ fontSize: 16, color: textColor, flex: 1 }}>{title}</Text>
    {badge && (
      <View style={{
        backgroundColor: Colors.danger,
        width: 20,
        height: 20,
        borderRadius: 10,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
        <Text style={{ color: 'white', fontSize: 12, fontWeight: 'bold' }}>{badge}</Text>
      </View>
    )}
  </TouchableOpacity>
);

const AuthNavigator = () => (
  <AuthStack.Navigator
    screenOptions={{
      headerShown: false,
    }}
  >
    <AuthStack.Screen name="Login" component={LoginScreen} />
    <AuthStack.Screen name="Register" component={RegisterScreen} />
  </AuthStack.Navigator>
);

const SobreAppScreen = ({ navigation }) => {
  const [activeSection, setActiveSection] = useState('sobre');

  // Fun√ß√µes para lidar com links externos
  const handleOpenWebsite = () => {
    Linking.openURL('https://curriculobot.app');
  };

  const handleContactSupport = () => {
    Linking.openURL('mailto:suporte@curriculobot.app');
  };

  const handleSocialMedia = (platform) => {
    let url = '';
    switch (platform) {
      case 'linkedin':
        url = 'https://linkedin.com/company/curriculobot';
        break;
      case 'twitter':
        url = 'https://twitter.com/curriculobot';
        break;
      case 'instagram':
        url = 'https://instagram.com/curriculobot';
        break;
    }

    if (url) Linking.openURL(url);
  };

  // Renderiza√ß√£o das se√ß√µes de conte√∫do
  const renderSectionIndicator = () => (
    <View style={styles.sectionIndicator}>
      <TouchableOpacity
        style={[
          styles.sectionTab,
          activeSection === 'sobre' && styles.activeSection
        ]}
        onPress={() => setActiveSection('sobre')}
      >
        <Text style={[
          styles.sectionTabText,
          activeSection === 'sobre' && styles.activeSectionText
        ]}>
          Sobre
        </Text>
      </TouchableOpacity>

      <TouchableOpacity
        style={[
          styles.sectionTab,
          activeSection === 'recursos' && styles.activeSection
        ]}
        onPress={() => setActiveSection('recursos')}
      >
        <Text style={[
          styles.sectionTabText,
          activeSection === 'recursos' && styles.activeSectionText
        ]}>
          Recursos
        </Text>
      </TouchableOpacity>

      <TouchableOpacity
        style={[
          styles.sectionTab,
          activeSection === 'versao' && styles.activeSection
        ]}
        onPress={() => setActiveSection('versao')}
      >
        <Text style={[
          styles.sectionTabText,
          activeSection === 'versao' && styles.activeSectionText
        ]}>
          Vers√£o
        </Text>
      </TouchableOpacity>
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.primary} />

      <ScrollView style={styles.scrollView}>
        {/* Cabe√ßalho Principal */}
        <View style={styles.header}>
          <TouchableOpacity
            style={styles.backButtonTop}
            onPress={() => navigation.goBack()}
          >
            <Text style={styles.backButtonTopText}>‚Äπ</Text>
          </TouchableOpacity>
        </View>

        {/* Hero Section */}
        <View style={styles.heroContainer}>
          <View style={styles.logoContainer}>
            <View style={styles.logoBackground}>
              <Text style={styles.logoIcon}>üìù</Text>
            </View>
          </View>
          <Text style={styles.appTitle}>CurriculoBot Premium</Text>
          <Text style={styles.appSubtitle}>Vers√£o 1.2.0</Text>
          <View style={styles.premiumBadge}>
            <Text style={styles.premiumBadgeText}>PREMIUM</Text>
          </View>
        </View>

        {/* Indicador de se√ß√µes */}
        {renderSectionIndicator()}

        {/* Conte√∫do principal */}
        <View style={styles.contentContainer}>
          {activeSection === 'sobre' && (
            <View style={styles.sectionContent}>
              <Text style={styles.sectionTitle}>O que √© o CurriculoBot?</Text>
              <Text style={styles.sectionDescription}>
                CurriculoBot √© um assistente inteligente que ajuda voc√™ a criar, gerenciar e analisar
                curr√≠culos profissionais utilizando intelig√™ncia artificial de m√∫ltiplos provedores.
              </Text>

              <Text style={styles.sectionDescription}>
                Desenvolvido por uma equipe de especialistas da Estacio de Florianopolis, o CurriculoBot utiliza
                algoritmos avan√ßados para personalizar seu curr√≠culo de acordo com as melhores pr√°ticas
                do mercado de trabalho atual.
              </Text>

              <View style={styles.infoCardContainer}>
                <View style={styles.infoCard}>
                  <Text style={styles.infoCardNumber}>1+</Text>
                  <Text style={styles.infoCardText}>Usu√°rios</Text>
                </View>

                <View style={styles.infoCard}>
                  <Text style={styles.infoCardNumber}>10+</Text>
                  <Text style={styles.infoCardText}>Curr√≠culos</Text>
                </View>

                <View style={styles.infoCard}>
                  <Text style={styles.infoCardNumber}>98%</Text>
                  <Text style={styles.infoCardText}>Satisfa√ß√£o</Text>
                </View>
              </View>
            </View>
          )}

          {activeSection === 'recursos' && (
            <View style={styles.sectionContent}>
              <Text style={styles.sectionTitle}>Recursos Premium</Text>

              <View style={styles.featureItem}>
                <View style={styles.featureIconContainer}>
                  <Text style={styles.featureIcon}>ü§ñ</Text>
                </View>
                <View style={styles.featureTextContainer}>
                  <Text style={styles.featureTitle}>Cria√ß√£o Guiada por IA</Text>
                  <Text style={styles.featureDescription}>
                    Interface conversacional intuitiva que simplifica a cria√ß√£o do seu curr√≠culo profissional.
                  </Text>
                </View>
              </View>

              <View style={styles.featureItem}>
                <View style={styles.featureIconContainer}>
                  <Text style={styles.featureIcon}>üìä</Text>
                </View>
                <View style={styles.featureTextContainer}>
                  <Text style={styles.featureTitle}>An√°lise Avan√ßada</Text>
                  <Text style={styles.featureDescription}>
                    An√°lise profissional do seu curr√≠culo usando intelig√™ncia artificial de v√°rias fontes.
                  </Text>
                </View>
              </View>

              <View style={styles.featureItem}>
                <View style={styles.featureIconContainer}>
                  <Text style={styles.featureIcon}>üåü</Text>
                </View>
                <View style={styles.featureTextContainer}>
                  <Text style={styles.featureTitle}>Dicas Personalizadas</Text>
                  <Text style={styles.featureDescription}>
                    Recomenda√ß√µes de melhorias, cursos e vagas personalizadas ao seu perfil.
                  </Text>
                </View>
              </View>

              <View style={styles.featureItem}>
                <View style={styles.featureIconContainer}>
                  <Text style={styles.featureIcon}>üìù</Text>
                </View>
                <View style={styles.featureTextContainer}>
                  <Text style={styles.featureTitle}>M√∫ltiplos Templates</Text>
                  <Text style={styles.featureDescription}>
                    Escolha entre diversos modelos profissionais para personalizar seu curr√≠culo.
                  </Text>
                </View>
              </View>

              <View style={styles.featureItem}>
                <View style={styles.featureIconContainer}>
                  <Text style={styles.featureIcon}>üîé</Text>
                </View>
                <View style={styles.featureTextContainer}>
                  <Text style={styles.featureTitle}>Busca de Vagas</Text>
                  <Text style={styles.featureDescription}>
                    Encontre oportunidades alinhadas com seu perfil profissional.
                  </Text>
                </View>
              </View>
            </View>
          )}

          {activeSection === 'versao' && (
            <View style={styles.sectionContent}>
              <Text style={styles.sectionTitle}>Detalhes da Vers√£o</Text>

              <View style={styles.versionCard}>
                <View style={styles.versionHeader}>
                  <Text style={styles.versionNumber}>1.2.0</Text>
                  <Text style={styles.versionDate}>Maio 2025</Text>
                </View>

                <View style={styles.versionFeatureList}>
                  <Text style={styles.versionFeatureTitle}>Novos recursos:</Text>

                  <View style={styles.versionFeatureItem}>
                    <View style={styles.versionFeatureDot} />
                    <Text style={styles.versionFeatureText}>
                      An√°lise avan√ßada de carreira com visualiza√ß√£o gr√°fica
                    </Text>
                  </View>

                  <View style={styles.versionFeatureItem}>
                    <View style={styles.versionFeatureDot} />
                    <Text style={styles.versionFeatureText}>
                      Integra√ß√£o com novas IAs (Claude, Perplexity, DeepSeek)
                    </Text>
                  </View>

                  <View style={styles.versionFeatureItem}>
                    <View style={styles.versionFeatureDot} />
                    <Text style={styles.versionFeatureText}>
                      Busca de vagas com compatibilidade por perfil
                    </Text>
                  </View>

                  <View style={styles.versionFeatureItem}>
                    <View style={styles.versionFeatureDot} />
                    <Text style={styles.versionFeatureText}>
                      Novos templates de curr√≠culo
                    </Text>
                  </View>

                  <View style={styles.versionFeatureItem}>
                    <View style={styles.versionFeatureDot} />
                    <Text style={styles.versionFeatureText}>
                      Interface redesenhada para melhor experi√™ncia
                    </Text>
                  </View>
                </View>
              </View>

              <View style={styles.versionPrevious}>
                <Text style={styles.versionPreviousTitle}>Vers√µes anteriores</Text>

                <View style={styles.versionPreviousItem}>
                  <Text style={styles.versionPreviousNumber}>1.1.0</Text>
                  <Text style={styles.versionPreviousDate}>Maior 2025</Text>
                </View>

                <View style={styles.versionPreviousItem}>
                  <Text style={styles.versionPreviousNumber}>1.0.0</Text>
                  <Text style={styles.versionPreviousDate}>Maio 2024</Text>
                </View>
              </View>
            </View>
          )}

          {/* Informa√ß√µes de contato */}
          <View style={styles.contactSection}>
            <Text style={styles.contactTitle}>Entre em Contato</Text>

            <TouchableOpacity
              style={styles.contactButton}
              onPress={handleOpenWebsite}
            >
              <Text style={styles.contactButtonIcon}>üåê</Text>
              <Text style={styles.contactButtonText}>www.curriculobot.app</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.contactButton}
              onPress={handleContactSupport}
            >
              <Text style={styles.contactButtonIcon}>‚úâÔ∏è</Text>
              <Text style={styles.contactButtonText}>suporte@curriculobot.app</Text>
            </TouchableOpacity>

            <View style={styles.socialMediaContainer}>
              <TouchableOpacity
                style={styles.socialButton}
                onPress={() => handleSocialMedia('linkedin')}
              >
                <Text style={styles.socialButtonText}>in</Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={styles.socialButton}
                onPress={() => handleSocialMedia('twitter')}
              >
                <Text style={styles.socialButtonText}>ùïè</Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={styles.socialButton}
                onPress={() => handleSocialMedia('instagram')}
              >
                <Text style={styles.socialButtonText}>üì∑</Text>
              </TouchableOpacity>
            </View>
          </View>

          {/* Rodap√© */}
          <View style={styles.footer}>
            <Text style={styles.footerText}>¬© 2025 CurriculoBot Premium</Text>
            <Text style={styles.footerText}>Todos os direitos reservados</Text>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const SelecionarCurriculoScreen = ({ navigation }) => {
  const { user } = useAuth();
  const [curriculos, setCurriculos] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    carregarCurriculos();
  }, []);

  const carregarCurriculos = async () => {
    try {
      setLoading(true);
      const cvs = await AsyncStorage.getItem(`curriculos_${user.id}`);
      setCurriculos(cvs ? JSON.parse(cvs) : []);
    } catch (error) {
      console.error('Erro ao carregar curr√≠culos:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel carregar seus curr√≠culos.');
    } finally {
      setLoading(false);
    }
  };

  const handleSelecionarCurriculo = (curriculo) => {
    navigation.navigate('BuscaVagas', { curriculoData: curriculo });
  };

  const formatDate = (dateString) => {
    try {
      if (!dateString) return 'Data n√£o dispon√≠vel';
      const date = new Date(dateString);
      return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
    } catch (error) {
      return 'Data inv√°lida';
    }
  };

  // Extrair informa√ß√µes do curr√≠culo para exibi√ß√£o
  const getResumoCurriculo = (curriculo) => {
    const cv = curriculo.data;
    const experiencias = cv.experiencias?.length || 0;
    const formacoes = cv.formacoes_academicas?.length || 0;
    const projetos = cv.projetos?.length || 0;
    const area = cv.informacoes_pessoais?.area || 'N√£o especificada';

    return { experiencias, formacoes, projetos, area };
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.dark} />

      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.backButtonText}>‚Äπ</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Selecionar Curr√≠culo</Text>
      </View>

      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={Colors.primary} />
          <Text style={{ marginTop: 10 }}>Carregando curr√≠culos...</Text>
        </View>
      ) : curriculos.length === 0 ? (
        <View style={styles.emptyState}>
          <Text style={styles.emptyStateTitle}>Nenhum Curr√≠culo Encontrado</Text>
          <Text style={styles.emptyStateText}>
            Voc√™ precisa criar um curr√≠culo antes de buscar vagas.
          </Text>
          <TouchableOpacity
            style={styles.primaryButton}
            onPress={() => navigation.navigate('Chatbot')}
          >
            <Text style={styles.primaryButtonText}>Criar Curr√≠culo</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <View style={{ flex: 1, padding: 15 }}>
          <View style={{
            backgroundColor: '#e8f5e9',
            padding: 15,
            borderRadius: 10,
            marginBottom: 20,
            borderLeftWidth: 4,
            borderLeftColor: Colors.success,
          }}>
            <Text style={{
              fontSize: 16,
              fontWeight: 'bold',
              marginBottom: 5,
              color: Colors.dark,
            }}>
              Buscar Vagas Personalizadas
            </Text>
            <Text style={{
              fontSize: 14,
              color: '#2e7d32',
            }}>
              Selecione o curr√≠culo que deseja usar como base para a busca de vagas. Nossa IA encontrar√° oportunidades de emprego alinhadas ao seu perfil profissional.
            </Text>
          </View>

          <Text style={{
            fontSize: 16,
            fontWeight: 'bold',
            marginBottom: 10,
            color: Colors.dark,
          }}>
            Selecione um curr√≠culo:
          </Text>

          <FlatList
            data={curriculos}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => {
              const resumo = getResumoCurriculo(item);

              return (
                <TouchableOpacity
                  style={{
                    backgroundColor: Colors.white,
                    borderRadius: 10,
                    marginBottom: 15,
                    padding: 16,
                    ...Platform.select({
                      ios: {
                        shadowColor: '#000',
                        shadowOffset: { width: 0, height: 2 },
                        shadowOpacity: 0.1,
                        shadowRadius: 3,
                      },
                      android: {
                        elevation: 2,
                      },
                    }),
                    borderLeftWidth: 4,
                    borderLeftColor: Colors.primary,
                  }}
                  onPress={() => handleSelecionarCurriculo(item)}
                >
                  <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Text style={{
                      fontSize: 18,
                      fontWeight: 'bold',
                      color: Colors.dark,
                      marginBottom: 5,
                    }}>
                      {item.nome || 'Curr√≠culo sem nome'}
                    </Text>

                    <View style={{
                      backgroundColor: Colors.primary,
                      paddingVertical: 4,
                      paddingHorizontal: 8,
                      borderRadius: 15,
                    }}>
                      <Text style={{ color: Colors.white, fontSize: 12 }}>
                        Selecionar
                      </Text>
                    </View>
                  </View>

                  <Text style={{
                    fontSize: 14,
                    color: Colors.lightText,
                    marginBottom: 10,
                  }}>
                    Criado em: {formatDate(item.dataCriacao)}
                  </Text>

                  <View style={{
                    backgroundColor: '#f5f5f5',
                    padding: 10,
                    borderRadius: 5,
                    marginTop: 5,
                  }}>
                    <Text style={{ color: Colors.dark }}>
                      <Text style={{ fontWeight: 'bold' }}>√Årea: </Text>
                      {resumo.area}
                    </Text>

                    <View style={{ flexDirection: 'row', marginTop: 5, flexWrap: 'wrap' }}>
                      <View style={{
                        backgroundColor: Colors.primary,
                        paddingVertical: 3,
                        paddingHorizontal: 8,
                        borderRadius: 12,
                        marginRight: 8,
                        marginBottom: 5,
                      }}>
                        <Text style={{ color: Colors.white, fontSize: 12 }}>
                          {resumo.experiencias} experi√™ncia(s)
                        </Text>
                      </View>

                      <View style={{
                        backgroundColor: Colors.secondary,
                        paddingVertical: 3,
                        paddingHorizontal: 8,
                        borderRadius: 12,
                        marginRight: 8,
                        marginBottom: 5,
                      }}>
                        <Text style={{ color: Colors.white, fontSize: 12 }}>
                          {resumo.formacoes} forma√ß√£o(√µes)
                        </Text>
                      </View>

                      <View style={{
                        backgroundColor: '#673AB7',
                        paddingVertical: 3,
                        paddingHorizontal: 8,
                        borderRadius: 12,
                        marginBottom: 5,
                      }}>
                        <Text style={{ color: Colors.white, fontSize: 12 }}>
                          {resumo.projetos} projeto(s)
                        </Text>
                      </View>
                    </View>
                  </View>
                </TouchableOpacity>
              );
            }}
          />
        </View>
      )}
    </SafeAreaView>
  );
};

const RootNavigator = () => {
  const { user, loading } = useAuth();

  // Log para ajudar na depura√ß√£o
  console.log('RootNavigator - User state:', user ? 'Logged in' : 'Logged out');

  // Mostrar tela de carregamento enquanto verifica autentica√ß√£o
  if (loading) {
    return <SplashScreen />;
  }

  return (
    <RootStack.Navigator screenOptions={{ headerShown: false }}>
      {user ? (
        <RootStack.Screen name="App" component={AppNavigator} />
      ) : (
        <RootStack.Screen name="Auth" component={AuthNavigator} />
      )}
    </RootStack.Navigator>
  );
};

const App = () => {
  return (
    <AuthProvider>
      <NavigationContainer>
        <RootNavigator />
      </NavigationContainer>
    </AuthProvider>
  );
};

export default App;